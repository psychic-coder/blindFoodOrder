"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; }\n/* harmony export */ });\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n// export default async function classifyIntentFromDeepSeek({message}) {\n//   const prompt = `Classify the user's message into one of the following intents:\n//     1. show_restaurants\n//     2. list_restaurants\n//     3. show_menu\n//     4. read_menu\n//     5. order_item\n//     6. nothing_matches\n//     Message: \"${message}\"\n//     Respond with only the intent id.`;\n//   try {\n//     const response = await axios.post(\n//       'https://api.deepseek.com/v1/chat/completions',\n//       {\n//         model: 'deepseek-chat',\n//         messages: [\n//           { role: 'system', content: 'You are a helpful assistant.' },\n//           { role: 'user', content: prompt },\n//         ],\n//       },\n//       {\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${process.env.DEEPSEEK_API_KEY}`,\n//         },\n//       }\n//     );\n//     const intent = response.data.choices?.[0]?.message?.content?.trim();\n//     res.status(200).json({ intent });\n//   } catch (error) {\n//     console.error('DeepSeek API Error:', error.response?.data || error.message);\n//     res.status(500).json({ error: 'Failed to classify intent' });\n//   }\n// }\n\nconst apiToken = process.env.NEXT_PUBLIC_LLAMA_API_TOKEN || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEI7QUFFMUIsd0VBQXdFO0FBRXhFLG1GQUFtRjtBQUNuRiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6Qiw0QkFBNEI7QUFDNUIseUNBQXlDO0FBRXpDLFVBQVU7QUFDVix5Q0FBeUM7QUFDekMsd0RBQXdEO0FBQ3hELFVBQVU7QUFDVixrQ0FBa0M7QUFDbEMsc0JBQXNCO0FBQ3RCLHlFQUF5RTtBQUN6RSwrQ0FBK0M7QUFDL0MsYUFBYTtBQUNiLFdBQVc7QUFDWCxVQUFVO0FBQ1YscUJBQXFCO0FBQ3JCLGdEQUFnRDtBQUNoRCxxRUFBcUU7QUFDckUsYUFBYTtBQUNiLFVBQVU7QUFDVixTQUFTO0FBRVQsMkVBQTJFO0FBQzNFLHdDQUF3QztBQUN4QyxzQkFBc0I7QUFDdEIsbUZBQW1GO0FBQ25GLG9FQUFvRTtBQUNwRSxNQUFNO0FBQ04sSUFBSTtBQUkwQjtBQUU5QixNQUFNRSxXQUFXQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLDJCQUEyQixJQUFJO0FBQzVELE1BQU1DLFdBQVcsSUFBSUwsK0NBQU9BLENBQUNDO0FBRXRCLE1BQU1LLGlCQUFpQixPQUFPQztJQUNqQ0MsUUFBUUMsR0FBRyxDQUFDRjtJQUNkLElBQUk7WUFxQndCRyxvQ0FBQUEsNEJBQUFBLG9CQUFBQTtRQXBCMUIsTUFBTUEsV0FBVyxNQUFNTCxTQUFTTSxHQUFHLENBQUM7WUFDbENDLFVBQVU7Z0JBQ1I7b0JBQ0VDLE1BQU07b0JBQ05DLFNBQVU7Z0JBU1o7Z0JBQ0E7b0JBQUVELE1BQU07b0JBQVFDLFNBQVNQO2dCQUFRO2FBQ2xDO1lBQ0RRLGFBQWE7WUFDYkMsWUFBWTtRQUNkO1FBQ0FSLFFBQVFDLEdBQUcsQ0FBQ0M7UUFDWixNQUFNTyxXQUFXQyxVQUFTUixvQkFBQUEsU0FBU1MsT0FBTyxjQUFoQlQseUNBQUFBLHFCQUFBQSxpQkFBa0IsQ0FBQyxFQUFFLGNBQXJCQSwwQ0FBQUEsNkJBQUFBLG1CQUF1QkgsT0FBTyxjQUE5Qkcsa0RBQUFBLHFDQUFBQSwyQkFBZ0NJLE9BQU8sY0FBdkNKLHlEQUFBQSxtQ0FBeUNVLElBQUk7UUFFdkUsd0JBQXdCO1FBQ3hCLE1BQU1DLFVBQVU7WUFDZDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUVELE9BQU9BLE9BQU8sQ0FBQ0osV0FBVyxFQUFFLElBQUk7SUFFbEMsRUFBRSxPQUFPSyxPQUFPO1FBQ2RkLFFBQVFjLEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU87SUFDVDtBQUNGLEVBQUUsQ0FFRixtQ0FBbUM7Q0FDbkMsZ0RBQWdEO0NBQ2hELDBCQUEwQjtDQUMxQixnQkFBZ0I7Q0FDaEIsd0JBQXdCO0NBQ3hCLHNCQUFzQjtDQUN0QixRQUFRO0NBQ1IsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcz80NjQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrKHttZXNzYWdlfSkge1xuIFxuLy8gICBjb25zdCBwcm9tcHQgPSBgQ2xhc3NpZnkgdGhlIHVzZXIncyBtZXNzYWdlIGludG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgaW50ZW50czpcbi8vICAgICAxLiBzaG93X3Jlc3RhdXJhbnRzXG4vLyAgICAgMi4gbGlzdF9yZXN0YXVyYW50c1xuLy8gICAgIDMuIHNob3dfbWVudVxuLy8gICAgIDQuIHJlYWRfbWVudVxuLy8gICAgIDUuIG9yZGVyX2l0ZW1cbi8vICAgICA2LiBub3RoaW5nX21hdGNoZXNcbi8vICAgICBNZXNzYWdlOiBcIiR7bWVzc2FnZX1cIlxuLy8gICAgIFJlc3BvbmQgd2l0aCBvbmx5IHRoZSBpbnRlbnQgaWQuYDtcblxuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbi8vICAgICAgICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsXG4vLyAgICAgICB7XG4vLyAgICAgICAgIG1vZGVsOiAnZGVlcHNlZWstY2hhdCcsXG4vLyAgICAgICAgIG1lc3NhZ2VzOiBbXG4vLyAgICAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogJ1lvdSBhcmUgYSBoZWxwZnVsIGFzc2lzdGFudC4nIH0sXG4vLyAgICAgICAgICAgeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9LFxuLy8gICAgICAgICBdLFxuLy8gICAgICAgfSxcbi8vICAgICAgIHtcbi8vICAgICAgICAgaGVhZGVyczoge1xuLy8gICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4vLyAgICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Byb2Nlc3MuZW52LkRFRVBTRUVLX0FQSV9LRVl9YCxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIH1cbi8vICAgICApO1xuXG4vLyAgICAgY29uc3QgaW50ZW50ID0gcmVzcG9uc2UuZGF0YS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKTtcbi8vICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGludGVudCB9KTtcbi8vICAgfSBjYXRjaCAoZXJyb3IpIHtcbi8vICAgICBjb25zb2xlLmVycm9yKCdEZWVwU2VlayBBUEkgRXJyb3I6JywgZXJyb3IucmVzcG9uc2U/LmRhdGEgfHwgZXJyb3IubWVzc2FnZSk7XG4vLyAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBjbGFzc2lmeSBpbnRlbnQnIH0pO1xuLy8gICB9XG4vLyB9XG5cblxuXG5pbXBvcnQgTGxhbWFBSSBmcm9tICdsbGFtYWFpJztcblxuY29uc3QgYXBpVG9rZW4gPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19MTEFNQV9BUElfVE9LRU4gfHwgJzk5Y2NmZTNhLWViMTgtNDIzMi04ZDkzLTZhZDU3MTNlYWNkNyc7XG5jb25zdCBsbGFtYUFQSSA9IG5ldyBMbGFtYUFJKGFwaVRva2VuKTtcblxuZXhwb3J0IGNvbnN0IGNsYXNzaWZ5SW50ZW50ID0gYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhtZXNzYWdlIClcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxsYW1hQVBJLnJ1bih7XG4gICAgICBtZXNzYWdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogXCJzeXN0ZW1cIixcbiAgICAgICAgICBjb250ZW50OiBgQ2xhc3NpZnkgdGhlIGZvbGxvd2luZyBtZXNzYWdlIGludG8gb25lIG9mIHRoZXNlIGludGVudHM6XG4gICAgICAgICAgMS4gc2hvd19yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gc2VlIHJlc3RhdXJhbnRzXG4gICAgICAgICAgMi4gbGlzdF9yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gaGVhciByZXN0YXVyYW50IG5hbWVzXG4gICAgICAgICAgMy4gc2hvd19tZW51IC0gVXNlciB3YW50cyB0byB2aWV3IGEgc3BlY2lmaWMgcmVzdGF1cmFudCdzIG1lbnVcbiAgICAgICAgICA0LiByZWFkX21lbnUgLSBVc2VyIHdhbnRzIHRvIGhlYXIgbWVudSBpdGVtc1xuICAgICAgICAgIDUuIG9yZGVyX2l0ZW0gLSBVc2VyIHdhbnRzIHRvIG9yZGVyIGZvb2RcbiAgICAgICAgICA2LiBub3RoaW5nX21hdGNoZXMgLSBObyBtYXRjaGluZyBpbnRlbnRcbiAgICAgICAgICBcbiAgICAgICAgICBSZXNwb25kIE9OTFkgd2l0aCB0aGUgaW50ZW50IG51bWJlciAoMS02KS5gXG4gICAgICAgIH0sXG4gICAgICAgIHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IG1lc3NhZ2UgfVxuICAgICAgXSxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjIsXG4gICAgICBtYXhfdG9rZW5zOiAyXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgIGNvbnN0IGludGVudElkID0gcGFyc2VJbnQocmVzcG9uc2UuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCkpO1xuICAgIFxuICAgIC8vIE1hcCB0byBpbnRlbnQgc3RyaW5nc1xuICAgIGNvbnN0IGludGVudHMgPSBbXG4gICAgICAnc2hvd19yZXN0YXVyYW50cycsXG4gICAgICAnbGlzdF9yZXN0YXVyYW50cycsXG4gICAgICAnc2hvd19tZW51JyxcbiAgICAgICdyZWFkX21lbnUnLFxuICAgICAgJ29yZGVyX2l0ZW0nLFxuICAgICAgJ25vdGhpbmdfbWF0Y2hlcydcbiAgICBdO1xuXG4gICAgcmV0dXJuIGludGVudHNbaW50ZW50SWQgLSAxXSB8fCAnbm90aGluZ19tYXRjaGVzJztcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xsYW1hQUkgY2xhc3NpZmljYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiAnZXJyb3InO1xuICB9XG59O1xuXG4vLyBPcHRpb25hbDogRGlyZWN0IGNoYXQgY29tcGxldGlvblxuLy8gZXhwb3J0IGNvbnN0IHNlbmRDaGF0ID0gYXN5bmMgKG1lc3NhZ2VzKSA9PiB7XG4vLyAgIHJldHVybiBsbGFtYUFQSS5ydW4oe1xuLy8gICAgIG1lc3NhZ2VzLFxuLy8gICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4vLyAgICAgbWF4X3Rva2VuczogMTUwXG4vLyAgIH0pO1xuLy8gfTsiXSwibmFtZXMiOlsiYXhpb3MiLCJMbGFtYUFJIiwiYXBpVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfTExBTUFfQVBJX1RPS0VOIiwibGxhbWFBUEkiLCJjbGFzc2lmeUludGVudCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwicmVzcG9uc2UiLCJydW4iLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwiaW50ZW50SWQiLCJwYXJzZUludCIsImNob2ljZXMiLCJ0cmltIiwiaW50ZW50cyIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});