"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   classifyIntentFromDeepSeek: function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\nconst OPENROUTER_API_KEY = \"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\";\nconst SITE_URL = \"http://localhost:3000/\";\nconst SITE_NAME = \"voice2bite\";\n// export async function classifyIntentFromDeepSeek({ message }) {\n//   const prompt = `Analyze this restaurant-related request and strictly classify its intent using these options:\n// 1. show_restaurants - When the user wants to visually see restaurants (e.g., \"show me restaurants\", \"display dining options\")\n// 2. list_restaurants - When the user wants to hear restaurant names (e.g., \"tell me about restaurants\", \"list food places\")\n// 3. show_menu - When requesting to view a specific restaurant's menu (e.g., \"show me Burger King's menu\")\n// 4. read_menu - When asking to hear menu items read aloud (e.g., \"what's on the menu?\", \"tell me the dishes\")\n// 5. order_item - When making a food order (e.g., \"I want to order pizza\", \"get me fries\")\n// 6. nothing_matches - Only if none of the above apply\n// Message to classify: \"${message}\"\n// Respond EXACTLY in this format: \"id|intent_name\"\n// Examples:\n// - \"show me restaurants\" → \"1|show_restaurants\"\n// - \"tell me about pizza places\" → \"2|list_restaurants\"\n// - \"what can I order at McDonald's\" → \"4|read_menu\"`\n//   try {\n//     const response = await axios.post(\n//       'https://openrouter.ai/api/v1/chat/completions',\n//       {\n//         model: 'deepseek/deepseek-r1-zero:free',\n//         messages: [\n//           { role: 'system', content: 'You are a helpful assistant.' },\n//           { role: 'user', content: prompt },\n//         ],\n//       },\n//       {\n//         headers: {\n//           'Authorization': `Bearer ${OPENROUTER_API_KEY}`,\n//         //   'HTTP-Referer': SITE_URL,\n//         //   'X-Title': SITE_NAME,\n//           'Content-Type': 'application/json',\n//         },\n//       }\n//     );\n//     console.log(response);\n//     const intent = response.data.choices?.[0]?.message?.content?.trim();\n//     // Validate response format\n//     if (!intent) throw new Error('Empty response from API');\n//     return intent;\n//   } catch (error) {\n//     console.error('API Error:', {\n//       status: error.response?.status,\n//       data: error.response?.data,\n//       message: error.message,\n//     });\n//     throw new Error(\n//       error.response?.data?.error?.message || \n//       'Failed to classify intent'\n//     );\n//   }\n// }\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    // Hardcoded fallback for testing\n    if (message.toLowerCase().includes(\"show me restaurants\")) {\n        return \"1|show_restaurants\";\n    }\n    const prompt = 'STRICT INTENT CLASSIFICATION RULES:\\n1. show_restaurants - ANY request to display/see restaurants \\n   (\"show restaurants\", \"display places to eat\", \"find dining options\")\\n2. list_restaurants - ANY request to hear/name restaurants  \\n   (\"list restaurants\", \"tell me about food places\", \"name some cafes\")\\n\\nUSER MESSAGE: \"'.concat(message, '\"\\n\\nRespond ONLY with the corresponding number and label:\\n\"1|show_restaurants\" or \"2|list_restaurants\" etc.\\nDO NOT add explanations.');\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post();\n        const raw = response.data.choices[0].message.content.trim();\n        // Robust parsing\n        return raw.includes(\"|\") ? raw : \"1|\".concat(raw);\n    } catch (error) {\n        var _error_config, _error_response;\n        console.error(\"FULL ERROR:\", {\n            request: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.data,\n            response: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data\n        });\n        return \"6|nothing_matches\";\n    }\n}\nconst apiToken = process.env.LLAMA || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});