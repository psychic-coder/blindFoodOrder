"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; }\n/* harmony export */ });\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n// export default async function classifyIntentFromDeepSeek({message}) {\n//   const prompt = `Classify the user's message into one of the following intents:\n//     1. show_restaurants\n//     2. list_restaurants\n//     3. show_menu\n//     4. read_menu\n//     5. order_item\n//     6. nothing_matches\n//     Message: \"${message}\"\n//     Respond with only the intent id.`;\n//   try {\n//     const response = await axios.post(\n//       'https://api.deepseek.com/v1/chat/completions',\n//       {\n//         model: 'deepseek-chat',\n//         messages: [\n//           { role: 'system', content: 'You are a helpful assistant.' },\n//           { role: 'user', content: prompt },\n//         ],\n//       },\n//       {\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: `Bearer ${process.env.DEEPSEEK_API_KEY}`,\n//         },\n//       }\n//     );\n//     const intent = response.data.choices?.[0]?.message?.content?.trim();\n//     res.status(200).json({ intent });\n//   } catch (error) {\n//     console.error('DeepSeek API Error:', error.response?.data || error.message);\n//     res.status(500).json({ error: 'Failed to classify intent' });\n//   }\n// }\n\nconst apiToken = process.env.NEXT_PUBLIC_LLAMA_API_TOKEN || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEI7QUFFMUIsd0VBQXdFO0FBRXhFLG1GQUFtRjtBQUNuRiwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6Qiw0QkFBNEI7QUFDNUIseUNBQXlDO0FBRXpDLFVBQVU7QUFDVix5Q0FBeUM7QUFDekMsd0RBQXdEO0FBQ3hELFVBQVU7QUFDVixrQ0FBa0M7QUFDbEMsc0JBQXNCO0FBQ3RCLHlFQUF5RTtBQUN6RSwrQ0FBK0M7QUFDL0MsYUFBYTtBQUNiLFdBQVc7QUFDWCxVQUFVO0FBQ1YscUJBQXFCO0FBQ3JCLGdEQUFnRDtBQUNoRCxxRUFBcUU7QUFDckUsYUFBYTtBQUNiLFVBQVU7QUFDVixTQUFTO0FBRVQsMkVBQTJFO0FBQzNFLHdDQUF3QztBQUN4QyxzQkFBc0I7QUFDdEIsbUZBQW1GO0FBQ25GLG9FQUFvRTtBQUNwRSxNQUFNO0FBQ04sSUFBSTtBQUkwQjtBQUU5QixNQUFNRSxXQUFXQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLDJCQUEyQixJQUFJO0FBQzVELE1BQU1DLFdBQVcsSUFBSUwsK0NBQU9BLENBQUNDO0FBRXRCLE1BQU1LLGlCQUFpQixPQUFPQztJQUVuQyxJQUFJO1lBcUJ3QkMsb0NBQUFBLDRCQUFBQSxvQkFBQUE7UUFwQjFCLE1BQU1BLFdBQVcsTUFBTUgsU0FBU0ksR0FBRyxDQUFDO1lBQ2xDQyxVQUFVO2dCQUNSO29CQUNFQyxNQUFNO29CQUNOQyxTQUFVO2dCQVNaO2dCQUNBO29CQUFFRCxNQUFNO29CQUFRQyxTQUFTTDtnQkFBUTthQUNsQztZQUNETSxhQUFhO1lBQ2JDLFlBQVk7UUFDZDtRQUNBQyxRQUFRQyxHQUFHLENBQUNSO1FBQ1osTUFBTVMsV0FBV0MsVUFBU1Ysb0JBQUFBLFNBQVNXLE9BQU8sY0FBaEJYLHlDQUFBQSxxQkFBQUEsaUJBQWtCLENBQUMsRUFBRSxjQUFyQkEsMENBQUFBLDZCQUFBQSxtQkFBdUJELE9BQU8sY0FBOUJDLGtEQUFBQSxxQ0FBQUEsMkJBQWdDSSxPQUFPLGNBQXZDSix5REFBQUEsbUNBQXlDWSxJQUFJO1FBRXZFLHdCQUF3QjtRQUN4QixNQUFNQyxVQUFVO1lBQ2Q7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFFRCxPQUFPQSxPQUFPLENBQUNKLFdBQVcsRUFBRSxJQUFJO0lBRWxDLEVBQUUsT0FBT0ssT0FBTztRQUNkUCxRQUFRTyxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPO0lBQ1Q7QUFDRixFQUFFLENBRUYsbUNBQW1DO0NBQ25DLGdEQUFnRDtDQUNoRCwwQkFBMEI7Q0FDMUIsZ0JBQWdCO0NBQ2hCLHdCQUF3QjtDQUN4QixzQkFBc0I7Q0FDdEIsUUFBUTtDQUNSLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvRGVlcFNlZWsuanM/NDY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG4vLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjbGFzc2lmeUludGVudEZyb21EZWVwU2Vlayh7bWVzc2FnZX0pIHtcbiBcbi8vICAgY29uc3QgcHJvbXB0ID0gYENsYXNzaWZ5IHRoZSB1c2VyJ3MgbWVzc2FnZSBpbnRvIG9uZSBvZiB0aGUgZm9sbG93aW5nIGludGVudHM6XG4vLyAgICAgMS4gc2hvd19yZXN0YXVyYW50c1xuLy8gICAgIDIuIGxpc3RfcmVzdGF1cmFudHNcbi8vICAgICAzLiBzaG93X21lbnVcbi8vICAgICA0LiByZWFkX21lbnVcbi8vICAgICA1LiBvcmRlcl9pdGVtXG4vLyAgICAgNi4gbm90aGluZ19tYXRjaGVzXG4vLyAgICAgTWVzc2FnZTogXCIke21lc3NhZ2V9XCJcbi8vICAgICBSZXNwb25kIHdpdGggb25seSB0aGUgaW50ZW50IGlkLmA7XG5cbi8vICAgdHJ5IHtcbi8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoXG4vLyAgICAgICAnaHR0cHM6Ly9hcGkuZGVlcHNlZWsuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnLFxuLy8gICAgICAge1xuLy8gICAgICAgICBtb2RlbDogJ2RlZXBzZWVrLWNoYXQnLFxuLy8gICAgICAgICBtZXNzYWdlczogW1xuLy8gICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQuJyB9LFxuLy8gICAgICAgICAgIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfSxcbi8vICAgICAgICAgXSxcbi8vICAgICAgIH0sXG4vLyAgICAgICB7XG4vLyAgICAgICAgIGhlYWRlcnM6IHtcbi8vICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuLy8gICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtwcm9jZXNzLmVudi5ERUVQU0VFS19BUElfS0VZfWAsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICB9XG4vLyAgICAgKTtcblxuLy8gICAgIGNvbnN0IGludGVudCA9IHJlc3BvbnNlLmRhdGEuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCk7XG4vLyAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyBpbnRlbnQgfSk7XG4vLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgY29uc29sZS5lcnJvcignRGVlcFNlZWsgQVBJIEVycm9yOicsIGVycm9yLnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yLm1lc3NhZ2UpO1xuLy8gICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gY2xhc3NpZnkgaW50ZW50JyB9KTtcbi8vICAgfVxuLy8gfVxuXG5cblxuaW1wb3J0IExsYW1hQUkgZnJvbSAnbGxhbWFhaSc7XG5cbmNvbnN0IGFwaVRva2VuID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTExBTUFfQVBJX1RPS0VOIHx8ICc5OWNjZmUzYS1lYjE4LTQyMzItOGQ5My02YWQ1NzEzZWFjZDcnO1xuY29uc3QgbGxhbWFBUEkgPSBuZXcgTGxhbWFBSShhcGlUb2tlbik7XG5cbmV4cG9ydCBjb25zdCBjbGFzc2lmeUludGVudCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsbGFtYUFQSS5ydW4oe1xuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6IFwic3lzdGVtXCIsXG4gICAgICAgICAgY29udGVudDogYENsYXNzaWZ5IHRoZSBmb2xsb3dpbmcgbWVzc2FnZSBpbnRvIG9uZSBvZiB0aGVzZSBpbnRlbnRzOlxuICAgICAgICAgIDEuIHNob3dfcmVzdGF1cmFudHMgLSBVc2VyIHdhbnRzIHRvIHNlZSByZXN0YXVyYW50c1xuICAgICAgICAgIDIuIGxpc3RfcmVzdGF1cmFudHMgLSBVc2VyIHdhbnRzIHRvIGhlYXIgcmVzdGF1cmFudCBuYW1lc1xuICAgICAgICAgIDMuIHNob3dfbWVudSAtIFVzZXIgd2FudHMgdG8gdmlldyBhIHNwZWNpZmljIHJlc3RhdXJhbnQncyBtZW51XG4gICAgICAgICAgNC4gcmVhZF9tZW51IC0gVXNlciB3YW50cyB0byBoZWFyIG1lbnUgaXRlbXNcbiAgICAgICAgICA1LiBvcmRlcl9pdGVtIC0gVXNlciB3YW50cyB0byBvcmRlciBmb29kXG4gICAgICAgICAgNi4gbm90aGluZ19tYXRjaGVzIC0gTm8gbWF0Y2hpbmcgaW50ZW50XG4gICAgICAgICAgXG4gICAgICAgICAgUmVzcG9uZCBPTkxZIHdpdGggdGhlIGludGVudCBudW1iZXIgKDEtNikuYFxuICAgICAgICB9LFxuICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiBtZXNzYWdlIH1cbiAgICAgIF0sXG4gICAgICB0ZW1wZXJhdHVyZTogMC4yLFxuICAgICAgbWF4X3Rva2VuczogMlxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICBjb25zdCBpbnRlbnRJZCA9IHBhcnNlSW50KHJlc3BvbnNlLmNob2ljZXM/LlswXT8ubWVzc2FnZT8uY29udGVudD8udHJpbSgpKTtcbiAgICBcbiAgICAvLyBNYXAgdG8gaW50ZW50IHN0cmluZ3NcbiAgICBjb25zdCBpbnRlbnRzID0gW1xuICAgICAgJ3Nob3dfcmVzdGF1cmFudHMnLFxuICAgICAgJ2xpc3RfcmVzdGF1cmFudHMnLFxuICAgICAgJ3Nob3dfbWVudScsXG4gICAgICAncmVhZF9tZW51JyxcbiAgICAgICdvcmRlcl9pdGVtJyxcbiAgICAgICdub3RoaW5nX21hdGNoZXMnXG4gICAgXTtcblxuICAgIHJldHVybiBpbnRlbnRzW2ludGVudElkIC0gMV0gfHwgJ25vdGhpbmdfbWF0Y2hlcyc7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdMbGFtYUFJIGNsYXNzaWZpY2F0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfVxufTtcblxuLy8gT3B0aW9uYWw6IERpcmVjdCBjaGF0IGNvbXBsZXRpb25cbi8vIGV4cG9ydCBjb25zdCBzZW5kQ2hhdCA9IGFzeW5jIChtZXNzYWdlcykgPT4ge1xuLy8gICByZXR1cm4gbGxhbWFBUEkucnVuKHtcbi8vICAgICBtZXNzYWdlcyxcbi8vICAgICB0ZW1wZXJhdHVyZTogMC43LFxuLy8gICAgIG1heF90b2tlbnM6IDE1MFxuLy8gICB9KTtcbi8vIH07Il0sIm5hbWVzIjpbImF4aW9zIiwiTGxhbWFBSSIsImFwaVRva2VuIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0xMQU1BX0FQSV9UT0tFTiIsImxsYW1hQVBJIiwiY2xhc3NpZnlJbnRlbnQiLCJtZXNzYWdlIiwicmVzcG9uc2UiLCJydW4iLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwiY29uc29sZSIsImxvZyIsImludGVudElkIiwicGFyc2VJbnQiLCJjaG9pY2VzIiwidHJpbSIsImludGVudHMiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});