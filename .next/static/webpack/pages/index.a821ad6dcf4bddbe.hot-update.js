"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processUserInput: function() { return /* binding */ processUserInput; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\nlet lastRequest = null;\nlet lastResponse = null;\nasync function processUserInput(message) {\n    const cleanMessage = message.trim().toLowerCase();\n    const intent = await classifyIntent(cleanMessage);\n    if (!intent.startsWith(\"6|\")) {\n        return {\n            type: \"intent\",\n            result: intent\n        };\n    }\n    const tags = await extractFoodTags(cleanMessage);\n    if (tags.length > 0) {\n        return {\n            type: \"food_preferences\",\n            result: tags\n        };\n    }\n    return {\n        type: \"unknown\",\n        result: \"Could not understand request\"\n    };\n}\nasync function classifyIntent(message) {\n    const hardcodedIntents = {\n        \"show me restaurants\": \"1|show_restaurants\",\n        \"display restaurants\": \"1|show_restaurants\",\n        \"find places to eat\": \"1|show_restaurants\",\n        \"where can i eat\": \"1|show_restaurants\",\n        \"show dining options\": \"1|show_restaurants\",\n        \"what restaurants are nearby\": \"1|show_restaurants\",\n        \"find food places\": \"1|show_restaurants\",\n        \"show me food options\": \"1|show_restaurants\",\n        \"display eateries\": \"1|show_restaurants\",\n        \"show nearby restaurants\": \"1|show_restaurants\",\n        \"list restaurants\": \"2|list_restaurants\",\n        \"tell me restaurants\": \"2|list_restaurants\",\n        \"name some places to eat\": \"2|list_restaurants\",\n        \"what restaurants are there\": \"2|list_restaurants\",\n        \"say restaurant names\": \"2|list_restaurants\",\n        \"list food places\": \"2|list_restaurants\",\n        \"tell me dining options\": \"2|list_restaurants\",\n        \"name restaurants nearby\": \"2|list_restaurants\",\n        \"what are my food options\": \"2|list_restaurants\",\n        \"list places to eat\": \"2|list_restaurants\",\n        \"show me the menu\": \"3|show_menu\",\n        \"display the menu\": \"3|show_menu\",\n        \"whats on the menu\": \"3|show_menu\",\n        \"show food options\": \"3|show_menu\",\n        \"view menu items\": \"3|show_menu\",\n        \"show me what you serve\": \"3|show_menu\",\n        \"display your dishes\": \"3|show_menu\",\n        \"what do you have\": \"3|show_menu\",\n        \"show your offerings\": \"3|show_menu\",\n        \"what can i order\": \"3|show_menu\",\n        \"read the menu\": \"4|read_menu\",\n        \"tell me the menu\": \"4|read_menu\",\n        \"say the dishes\": \"4|read_menu\",\n        \"what are my choices\": \"4|read_menu\",\n        \"list the menu items\": \"4|read_menu\",\n        \"tell me what you serve\": \"4|read_menu\",\n        \"say your offerings\": \"4|read_menu\",\n        \"what are my options\": \"4|read_menu\",\n        \"read me the dishes\": \"4|read_menu\",\n        \"tell me available food\": \"4|read_menu\",\n        \"i want to order\": \"5|order_item\",\n        \"get me food\": \"5|order_item\",\n        \"place an order\": \"5|order_item\",\n        \"i want food\": \"5|order_item\",\n        \"give me something to eat\": \"5|order_item\",\n        \"can i order\": \"5|order_item\",\n        \"take my order\": \"5|order_item\",\n        \"i need food\": \"5|order_item\",\n        \"prepare me a meal\": \"5|order_item\",\n        \"make me something\": \"5|order_item\",\n        \"restaurants please\": \"1|show_restaurants\",\n        \"food places\": \"1|show_restaurants\",\n        \"show restaurants\": \"1|show_restaurants\",\n        \"list places\": \"2|list_restaurants\",\n        \"tell me options\": \"2|list_restaurants\",\n        \"show me choices\": \"3|show_menu\",\n        \"whats available\": \"3|show_menu\",\n        \"i want something\": \"5|order_item\"\n    };\n    if (hardcodedIntents[message]) {\n        return hardcodedIntents[message];\n    }\n    const prompt = '\\n  INTENT CLASSIFICATION\\n  ====================\\n  Options:\\n  1|show_restaurants - User wants to see listings\\n  2|list_restaurants - User wants to hear names\\n  3|show_menu - View specific menu\\n  4|read_menu - Hear menu items\\n  5|order_item - Direct food order\\n  6|nothing_matches - No match\\n\\n  Examples:\\n  \"Display restaurants\" → 1|show_restaurants\\n  \"Tell me pizza places\" → 2|list_restaurants\\n  \"Show Burger King menu\" → 3|show_menu\\n\\n  Message: \"'.concat(message, '\"\\n  Respond with \"ID|INTENT\" or \"6|nothing_matches\"');\n    try {\n        const response = await callLanguageAPI(prompt);\n        return validateIntentResponse(response);\n    } catch (error) {\n        console.error(\"Intent classification failed:\", error);\n        return \"6|nothing_matches\";\n    }\n}\nasync function extractFoodTags(message) {\n    const quickTags = {\n        \"spicy\": [\n            \"spicy\"\n        ],\n        \"hot\": [\n            \"spicy\"\n        ],\n        \"sweet\": [\n            \"sweet\"\n        ],\n        \"sour\": [\n            \"sour\"\n        ],\n        \"bitter\": [\n            \"bitter\"\n        ],\n        \"tangy\": [\n            \"sour\"\n        ],\n        \"mild\": [\n            \"mild\"\n        ],\n        \"savory\": [\n            \"umami\"\n        ],\n        \"vegetarian\": [\n            \"vegetarian\"\n        ],\n        \"veg \": [\n            \"vegetarian\"\n        ],\n        \"vegan\": [\n            \"vegan\"\n        ],\n        \"gluten\": [\n            \"gluten-free\"\n        ],\n        \"dairy\": [\n            \"dairy-free\"\n        ],\n        \"lactose\": [\n            \"dairy-free\"\n        ],\n        \"egg\": [\n            \"egg-free\"\n        ],\n        \"nut free\": [\n            \"nut-free\"\n        ],\n        \"pescatarian\": [\n            \"pescatarian\"\n        ],\n        \"pregnant\": [\n            \"pregnant\",\n            \"sour\"\n        ],\n        \"diabetic\": [\n            \"diabetic\",\n            \"low-sugar\"\n        ],\n        \"diabetes\": [\n            \"diabetic\",\n            \"low-sugar\"\n        ],\n        \"keto\": [\n            \"keto\",\n            \"low-carb\"\n        ],\n        \"low carb\": [\n            \"low-carb\"\n        ],\n        \"low fat\": [\n            \"low-fat\"\n        ],\n        \"high protein\": [\n            \"high-protein\"\n        ],\n        \"allerg\": [\n            \"allergy\"\n        ],\n        \"halal\": [\n            \"halal\"\n        ],\n        \"kosher\": [\n            \"kosher\"\n        ],\n        \"jain\": [\n            \"jain\"\n        ],\n        \"buddhist\": [\n            \"buddhist\"\n        ],\n        \"crunchy\": [\n            \"crunchy\"\n        ],\n        \"creamy\": [\n            \"creamy\"\n        ],\n        \"chewy\": [\n            \"chewy\"\n        ],\n        \"soft\": [\n            \"soft\"\n        ],\n        \"crispy\": [\n            \"crunchy\"\n        ],\n        \"grilled\": [\n            \"grilled\"\n        ],\n        \"fried\": [\n            \"fried\"\n        ],\n        \"steamed\": [\n            \"steamed\"\n        ],\n        \"raw\": [\n            \"raw\"\n        ],\n        \"organic\": [\n            \"organic\"\n        ],\n        \"breakfast\": [\n            \"breakfast\"\n        ],\n        \"brunch\": [\n            \"brunch\"\n        ],\n        \"lunch\": [\n            \"lunch\"\n        ],\n        \"dinner\": [\n            \"dinner\"\n        ],\n        \"snack\": [\n            \"snack\"\n        ],\n        \"italian\": [\n            \"italian\"\n        ],\n        \"mexican\": [\n            \"mexican\"\n        ],\n        \"indian\": [\n            \"indian\"\n        ],\n        \"chinese\": [\n            \"chinese\"\n        ],\n        \"mediterranean\": [\n            \"mediterranean\"\n        ],\n        \"craving\": [\n            \"craving\"\n        ],\n        \"want\": [\n            \"want\"\n        ],\n        \"need\": [\n            \"need\"\n        ],\n        \"would love\": [\n            \"would love\"\n        ],\n        \"in mood for\": [\n            \"in mood for\"\n        ],\n        \"looking for\": [\n            \"looking for\"\n        ]\n    };\n    for (const [keyword, tags] of Object.entries(quickTags)){\n        if (message.includes(keyword)) {\n            return tags;\n        }\n    }\n    const prompt = '\\n  FOOD PREFERENCE ANALYSIS\\n  ========================\\n  Extract ALL applicable tags from:\\n  \"'.concat(message, '\"\\n\\n  Categories:\\n  - Flavors: spicy, sweet, sour, etc.\\n  - Diets: vegetarian, vegan, etc.\\n  - Health: pregnant, diabetic, etc.\\n  - Texture: crunchy, creamy, etc.\\n  - Verbs: craving, want, need\\n\\n  Respond with comma-separated tags or \"none\".\\n  Examples:\\n  \"I\\'m pregnant\" → \"pregnant,sour\"\\n  \"Want spicy tacos\" → \"spicy,want\"');\n    try {\n        const response = await callLanguageAPI(prompt);\n        return parseTags(response);\n    } catch (error) {\n        console.error(\"Tag extraction failed:\", error);\n        return [];\n    }\n}\nasync function callLanguageAPI(prompt) {\n    const API_KEY = process.env.DEEPSEEK_API_KEY || \"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\";\n    const SITE_URL = \"http://localhost:3000\";\n    lastRequest = {\n        prompt\n    };\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://openrouter.ai/api/v1/chat/completions\", {\n            model: \"deepseek/deepseek-r1-zero:free\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Respond concisely.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            temperature: 0.3,\n            max_tokens: 30\n        }, {\n            headers: {\n                \"Authorization\": \"Bearer \".concat(API_KEY),\n                \"HTTP-Referer\": SITE_URL,\n                \"X-Title\": \"voice2bite\",\n                \"Content-Type\": \"application/json\"\n            },\n            timeout: 8000\n        });\n        lastResponse = response.data;\n        return response.data.choices[0].message.content.trim();\n    } catch (error) {\n        var _error_response, _error_response1;\n        console.error(\"API Call Failed:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            error: ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.data) || error.message,\n            request: lastRequest\n        });\n        throw error;\n    }\n}\nfunction validateIntentResponse(response) {\n    if (/^[1-6]\\|[\\w_]+$/.test(response)) {\n        return response;\n    }\n    return \"6|nothing_matches\";\n}\nfunction parseTags(response) {\n    return response === \"none\" ? [] : response.split(\",\").map((tag)=>tag.trim()).filter((tag)=>tag.length > 0);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});