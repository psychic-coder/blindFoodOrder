"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   \"default\": function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"./node_modules/openai/index.mjs\");\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    baseURL: \"https://api.deepseek.com\",\n    apiKey: \"sk-2f5b7faf13b1483893b3bc4790ff9c41\",\n    dangerouslyAllowBrowser: true // Replace with a secure reference in production\n});\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    const prompt = \"Classify the user's message into one of the following intents:\\n    1. show_restaurants\\n    2. list_restaurants\\n    3. show_menu\\n    4. read_menu\\n    5. order_item\\n    6. nothing_matches\\n    Message: \\\"\".concat(message, '\"\\n    Respond with only the intent id.');\n    try {\n        var _completion_choices__message_content, _completion_choices__message, _completion_choices_, _completion_choices;\n        const completion = await openai.chat.completions.create({\n            model: \"deepseek-chat\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ]\n        });\n        const intent = (_completion_choices = completion.choices) === null || _completion_choices === void 0 ? void 0 : (_completion_choices_ = _completion_choices[0]) === null || _completion_choices_ === void 0 ? void 0 : (_completion_choices__message = _completion_choices_.message) === null || _completion_choices__message === void 0 ? void 0 : (_completion_choices__message_content = _completion_choices__message.content) === null || _completion_choices__message_content === void 0 ? void 0 : _completion_choices__message_content.trim();\n        return intent;\n    } catch (error) {\n        console.error(\"DeepSeek API Error:\", error.message);\n        throw new Error(\"Failed to classify intent\");\n    }\n}\nconst apiToken = process.env.LLAMA || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUU0QjtBQUNFO0FBRTlCLE1BQU1FLFNBQVMsSUFBSUYsOENBQU1BLENBQUM7SUFDeEJHLFNBQVM7SUFDVEMsUUFBUTtJQUNSQyx5QkFBeUIsS0FBSSxnREFBZ0Q7QUFDL0U7QUFFZSxlQUFlQywyQkFBMkIsS0FBVztRQUFYLEVBQUVDLE9BQU8sRUFBRSxHQUFYO0lBQ3ZELE1BQU1DLFNBQVMsbU5BT08sT0FBUkQsU0FBUTtJQUd0QixJQUFJO1lBU2FFLHNDQUFBQSw4QkFBQUEsc0JBQUFBO1FBUmYsTUFBTUEsYUFBYSxNQUFNUCxPQUFPUSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDO1lBQ3REQyxPQUFPO1lBQ1BDLFVBQVU7Z0JBQ1I7b0JBQUVDLE1BQU07b0JBQVVDLFNBQVM7Z0JBQStCO2dCQUMxRDtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1I7Z0JBQU87YUFDakM7UUFDSDtRQUVBLE1BQU1TLFVBQVNSLHNCQUFBQSxXQUFXUyxPQUFPLGNBQWxCVCwyQ0FBQUEsdUJBQUFBLG1CQUFvQixDQUFDLEVBQUUsY0FBdkJBLDRDQUFBQSwrQkFBQUEscUJBQXlCRixPQUFPLGNBQWhDRSxvREFBQUEsdUNBQUFBLDZCQUFrQ08sT0FBTyxjQUF6Q1AsMkRBQUFBLHFDQUEyQ1UsSUFBSTtRQUM5RCxPQUFPRjtJQUNULEVBQUUsT0FBT0csT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsdUJBQXVCQSxNQUFNYixPQUFPO1FBQ2xELE1BQU0sSUFBSWUsTUFBTTtJQUNsQjtBQUNGO0FBTUEsTUFBTUMsV0FBV0MsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLElBQUk7QUFDdEMsTUFBTUMsV0FBVyxJQUFJMUIsK0NBQU9BLENBQUNzQjtBQUV0QixNQUFNSyxpQkFBaUIsT0FBT3JCO0lBQ2pDYyxRQUFRUSxHQUFHLENBQUMsV0FBVXRCO0lBQ3hCLElBQUk7WUFxQndCdUIsb0NBQUFBLDRCQUFBQSxvQkFBQUE7UUFwQjFCLE1BQU1BLFdBQVcsTUFBTUgsU0FBU0ksR0FBRyxDQUFDO1lBQ2xDakIsVUFBVTtnQkFDUjtvQkFDRUMsTUFBTTtvQkFDTkMsU0FBVTtnQkFTWjtnQkFDQTtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1Q7Z0JBQVE7YUFDbEM7WUFDRHlCLGFBQWE7WUFDYkMsWUFBWTtRQUNkO1FBQ0FaLFFBQVFRLEdBQUcsQ0FBQ0M7UUFDWixNQUFNSSxXQUFXQyxVQUFTTCxvQkFBQUEsU0FBU1osT0FBTyxjQUFoQlkseUNBQUFBLHFCQUFBQSxpQkFBa0IsQ0FBQyxFQUFFLGNBQXJCQSwwQ0FBQUEsNkJBQUFBLG1CQUF1QnZCLE9BQU8sY0FBOUJ1QixrREFBQUEscUNBQUFBLDJCQUFnQ2QsT0FBTyxjQUF2Q2MseURBQUFBLG1DQUF5Q1gsSUFBSTtRQUV2RSx3QkFBd0I7UUFDeEIsTUFBTWlCLFVBQVU7WUFDZDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUVELE9BQU9BLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFLElBQUk7SUFFbEMsRUFBRSxPQUFPZCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU87SUFDVDtBQUNGLEVBQUUsQ0FFRixtQ0FBbUM7Q0FDbkMsZ0RBQWdEO0NBQ2hELDBCQUEwQjtDQUMxQixnQkFBZ0I7Q0FDaEIsd0JBQXdCO0NBQ3hCLHNCQUFzQjtDQUN0QixRQUFRO0NBQ1IsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcz80NjQzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSc7XG5pbXBvcnQgTGxhbWFBSSBmcm9tICdsbGFtYWFpJztcblxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGJhc2VVUkw6ICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20nLFxuICBhcGlLZXk6ICdzay0yZjViN2ZhZjEzYjE0ODM4OTNiM2JjNDc5MGZmOWM0MScsIFxuICBkYW5nZXJvdXNseUFsbG93QnJvd3NlcjogdHJ1ZS8vIFJlcGxhY2Ugd2l0aCBhIHNlY3VyZSByZWZlcmVuY2UgaW4gcHJvZHVjdGlvblxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrKHsgbWVzc2FnZSB9KSB7XG4gIGNvbnN0IHByb21wdCA9IGBDbGFzc2lmeSB0aGUgdXNlcidzIG1lc3NhZ2UgaW50byBvbmUgb2YgdGhlIGZvbGxvd2luZyBpbnRlbnRzOlxuICAgIDEuIHNob3dfcmVzdGF1cmFudHNcbiAgICAyLiBsaXN0X3Jlc3RhdXJhbnRzXG4gICAgMy4gc2hvd19tZW51XG4gICAgNC4gcmVhZF9tZW51XG4gICAgNS4gb3JkZXJfaXRlbVxuICAgIDYuIG5vdGhpbmdfbWF0Y2hlc1xuICAgIE1lc3NhZ2U6IFwiJHttZXNzYWdlfVwiXG4gICAgUmVzcG9uZCB3aXRoIG9ubHkgdGhlIGludGVudCBpZC5gO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgY29tcGxldGlvbiA9IGF3YWl0IG9wZW5haS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XG4gICAgICBtb2RlbDogJ2RlZXBzZWVrLWNoYXQnLFxuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogJ1lvdSBhcmUgYSBoZWxwZnVsIGFzc2lzdGFudC4nIH0sXG4gICAgICAgIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnRlbnQgPSBjb21wbGV0aW9uLmNob2ljZXM/LlswXT8ubWVzc2FnZT8uY29udGVudD8udHJpbSgpO1xuICAgIHJldHVybiBpbnRlbnQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRGVlcFNlZWsgQVBJIEVycm9yOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNsYXNzaWZ5IGludGVudCcpO1xuICB9XG59XG5cblxuXG5cblxuY29uc3QgYXBpVG9rZW4gPSBwcm9jZXNzLmVudi5MTEFNQSB8fCAnOTljY2ZlM2EtZWIxOC00MjMyLThkOTMtNmFkNTcxM2VhY2Q3JztcbmNvbnN0IGxsYW1hQVBJID0gbmV3IExsYW1hQUkoYXBpVG9rZW4pO1xuXG5leHBvcnQgY29uc3QgY2xhc3NpZnlJbnRlbnQgPSBhc3luYyAobWVzc2FnZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwibWVzc2FnZVwiLG1lc3NhZ2UpXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBsbGFtYUFQSS5ydW4oe1xuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6IFwic3lzdGVtXCIsXG4gICAgICAgICAgY29udGVudDogYENsYXNzaWZ5IHRoZSBmb2xsb3dpbmcgbWVzc2FnZSBpbnRvIG9uZSBvZiB0aGVzZSBpbnRlbnRzOlxuICAgICAgICAgIDEuIHNob3dfcmVzdGF1cmFudHMgLSBVc2VyIHdhbnRzIHRvIHNlZSByZXN0YXVyYW50c1xuICAgICAgICAgIDIuIGxpc3RfcmVzdGF1cmFudHMgLSBVc2VyIHdhbnRzIHRvIGhlYXIgcmVzdGF1cmFudCBuYW1lc1xuICAgICAgICAgIDMuIHNob3dfbWVudSAtIFVzZXIgd2FudHMgdG8gdmlldyBhIHNwZWNpZmljIHJlc3RhdXJhbnQncyBtZW51XG4gICAgICAgICAgNC4gcmVhZF9tZW51IC0gVXNlciB3YW50cyB0byBoZWFyIG1lbnUgaXRlbXNcbiAgICAgICAgICA1LiBvcmRlcl9pdGVtIC0gVXNlciB3YW50cyB0byBvcmRlciBmb29kXG4gICAgICAgICAgNi4gbm90aGluZ19tYXRjaGVzIC0gTm8gbWF0Y2hpbmcgaW50ZW50XG4gICAgICAgICAgXG4gICAgICAgICAgUmVzcG9uZCBPTkxZIHdpdGggdGhlIGludGVudCBudW1iZXIgKDEtNikuYFxuICAgICAgICB9LFxuICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiBtZXNzYWdlIH1cbiAgICAgIF0sXG4gICAgICB0ZW1wZXJhdHVyZTogMC4yLFxuICAgICAgbWF4X3Rva2VuczogMlxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICBjb25zdCBpbnRlbnRJZCA9IHBhcnNlSW50KHJlc3BvbnNlLmNob2ljZXM/LlswXT8ubWVzc2FnZT8uY29udGVudD8udHJpbSgpKTtcbiAgICBcbiAgICAvLyBNYXAgdG8gaW50ZW50IHN0cmluZ3NcbiAgICBjb25zdCBpbnRlbnRzID0gW1xuICAgICAgJ3Nob3dfcmVzdGF1cmFudHMnLFxuICAgICAgJ2xpc3RfcmVzdGF1cmFudHMnLFxuICAgICAgJ3Nob3dfbWVudScsXG4gICAgICAncmVhZF9tZW51JyxcbiAgICAgICdvcmRlcl9pdGVtJyxcbiAgICAgICdub3RoaW5nX21hdGNoZXMnXG4gICAgXTtcblxuICAgIHJldHVybiBpbnRlbnRzW2ludGVudElkIC0gMV0gfHwgJ25vdGhpbmdfbWF0Y2hlcyc7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdMbGFtYUFJIGNsYXNzaWZpY2F0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfVxufTtcblxuLy8gT3B0aW9uYWw6IERpcmVjdCBjaGF0IGNvbXBsZXRpb25cbi8vIGV4cG9ydCBjb25zdCBzZW5kQ2hhdCA9IGFzeW5jIChtZXNzYWdlcykgPT4ge1xuLy8gICByZXR1cm4gbGxhbWFBUEkucnVuKHtcbi8vICAgICBtZXNzYWdlcyxcbi8vICAgICB0ZW1wZXJhdHVyZTogMC43LFxuLy8gICAgIG1heF90b2tlbnM6IDE1MFxuLy8gICB9KTtcbi8vIH07Il0sIm5hbWVzIjpbIk9wZW5BSSIsIkxsYW1hQUkiLCJvcGVuYWkiLCJiYXNlVVJMIiwiYXBpS2V5IiwiZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXIiLCJjbGFzc2lmeUludGVudEZyb21EZWVwU2VlayIsIm1lc3NhZ2UiLCJwcm9tcHQiLCJjb21wbGV0aW9uIiwiY2hhdCIsImNvbXBsZXRpb25zIiwiY3JlYXRlIiwibW9kZWwiLCJtZXNzYWdlcyIsInJvbGUiLCJjb250ZW50IiwiaW50ZW50IiwiY2hvaWNlcyIsInRyaW0iLCJlcnJvciIsImNvbnNvbGUiLCJFcnJvciIsImFwaVRva2VuIiwicHJvY2VzcyIsImVudiIsIkxMQU1BIiwibGxhbWFBUEkiLCJjbGFzc2lmeUludGVudCIsImxvZyIsInJlc3BvbnNlIiwicnVuIiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwiaW50ZW50SWQiLCJwYXJzZUludCIsImludGVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});