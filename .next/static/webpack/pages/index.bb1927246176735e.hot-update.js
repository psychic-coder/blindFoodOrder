"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   \"default\": function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"./node_modules/openai/index.mjs\");\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    baseURL: \"https://api.deepseek.com\",\n    apiKey: \"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\",\n    dangerouslyAllowBrowser: true\n});\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    const prompt = \"Classify the user's message into one of the following intents:\\n    1. show_restaurants\\n    2. list_restaurants\\n    3. show_menu\\n    4. read_menu\\n    5. order_item\\n    6. nothing_matches\\n    Message: \\\"\".concat(message, '\"\\n    Respond with only the intent id.');\n    try {\n        var _completion_choices__message_content, _completion_choices__message, _completion_choices_, _completion_choices;\n        const completion = await openai.chat.completions.create({\n            model: \"deepseek-chat\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ]\n        });\n        const intent = (_completion_choices = completion.choices) === null || _completion_choices === void 0 ? void 0 : (_completion_choices_ = _completion_choices[0]) === null || _completion_choices_ === void 0 ? void 0 : (_completion_choices__message = _completion_choices_.message) === null || _completion_choices__message === void 0 ? void 0 : (_completion_choices__message_content = _completion_choices__message.content) === null || _completion_choices__message_content === void 0 ? void 0 : _completion_choices__message_content.trim();\n        return intent;\n    } catch (error) {\n        console.error(\"DeepSeek API Error:\", error.message);\n        throw new Error(\"Failed to classify intent\");\n    }\n}\nconst apiToken = process.env.LLAMA || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUU0QjtBQUNFO0FBRTlCLE1BQU1FLFNBQVMsSUFBSUYsOENBQU1BLENBQUM7SUFDeEJHLFNBQVM7SUFDVEMsUUFBUTtJQUNSQyx5QkFBeUI7QUFDM0I7QUFFZSxlQUFlQywyQkFBMkIsS0FBVztRQUFYLEVBQUVDLE9BQU8sRUFBRSxHQUFYO0lBQ3ZELE1BQU1DLFNBQVMsbU5BT08sT0FBUkQsU0FBUTtJQUd0QixJQUFJO1lBU2FFLHNDQUFBQSw4QkFBQUEsc0JBQUFBO1FBUmYsTUFBTUEsYUFBYSxNQUFNUCxPQUFPUSxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDO1lBQ3REQyxPQUFPO1lBQ1BDLFVBQVU7Z0JBQ1I7b0JBQUVDLE1BQU07b0JBQVVDLFNBQVM7Z0JBQStCO2dCQUMxRDtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1I7Z0JBQU87YUFDakM7UUFDSDtRQUVBLE1BQU1TLFVBQVNSLHNCQUFBQSxXQUFXUyxPQUFPLGNBQWxCVCwyQ0FBQUEsdUJBQUFBLG1CQUFvQixDQUFDLEVBQUUsY0FBdkJBLDRDQUFBQSwrQkFBQUEscUJBQXlCRixPQUFPLGNBQWhDRSxvREFBQUEsdUNBQUFBLDZCQUFrQ08sT0FBTyxjQUF6Q1AsMkRBQUFBLHFDQUEyQ1UsSUFBSTtRQUM5RCxPQUFPRjtJQUNULEVBQUUsT0FBT0csT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsdUJBQXVCQSxNQUFNYixPQUFPO1FBQ2xELE1BQU0sSUFBSWUsTUFBTTtJQUNsQjtBQUNGO0FBTUEsTUFBTUMsV0FBV0MsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLElBQUk7QUFDdEMsTUFBTUMsV0FBVyxJQUFJMUIsK0NBQU9BLENBQUNzQjtBQUV0QixNQUFNSyxpQkFBaUIsT0FBT3JCO0lBQ2pDYyxRQUFRUSxHQUFHLENBQUMsV0FBVXRCO0lBQ3hCLElBQUk7WUFxQndCdUIsb0NBQUFBLDRCQUFBQSxvQkFBQUE7UUFwQjFCLE1BQU1BLFdBQVcsTUFBTUgsU0FBU0ksR0FBRyxDQUFDO1lBQ2xDakIsVUFBVTtnQkFDUjtvQkFDRUMsTUFBTTtvQkFDTkMsU0FBVTtnQkFTWjtnQkFDQTtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1Q7Z0JBQVE7YUFDbEM7WUFDRHlCLGFBQWE7WUFDYkMsWUFBWTtRQUNkO1FBQ0FaLFFBQVFRLEdBQUcsQ0FBQ0M7UUFDWixNQUFNSSxXQUFXQyxVQUFTTCxvQkFBQUEsU0FBU1osT0FBTyxjQUFoQlkseUNBQUFBLHFCQUFBQSxpQkFBa0IsQ0FBQyxFQUFFLGNBQXJCQSwwQ0FBQUEsNkJBQUFBLG1CQUF1QnZCLE9BQU8sY0FBOUJ1QixrREFBQUEscUNBQUFBLDJCQUFnQ2QsT0FBTyxjQUF2Q2MseURBQUFBLG1DQUF5Q1gsSUFBSTtRQUV2RSx3QkFBd0I7UUFDeEIsTUFBTWlCLFVBQVU7WUFDZDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUVELE9BQU9BLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFLElBQUk7SUFFbEMsRUFBRSxPQUFPZCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU87SUFDVDtBQUNGLEVBQUUsQ0FFRixtQ0FBbUM7Q0FDbkMsZ0RBQWdEO0NBQ2hELDBCQUEwQjtDQUMxQixnQkFBZ0I7Q0FDaEIsd0JBQXdCO0NBQ3hCLHNCQUFzQjtDQUN0QixRQUFRO0NBQ1IsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcz80NjQzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSc7XG5pbXBvcnQgTGxhbWFBSSBmcm9tICdsbGFtYWFpJztcblxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGJhc2VVUkw6ICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20nLFxuICBhcGlLZXk6ICdzay1vci12MS04OGZmYTY0MjkxMWQ1ZmExMTk3NDBhNzFkZTg0OTdkZGU0MmE2NmU1NDBmNjI4OWIwZWFiMmZjZjQzMjE0MDViJywgXG4gIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gY2xhc3NpZnlJbnRlbnRGcm9tRGVlcFNlZWsoeyBtZXNzYWdlIH0pIHtcbiAgY29uc3QgcHJvbXB0ID0gYENsYXNzaWZ5IHRoZSB1c2VyJ3MgbWVzc2FnZSBpbnRvIG9uZSBvZiB0aGUgZm9sbG93aW5nIGludGVudHM6XG4gICAgMS4gc2hvd19yZXN0YXVyYW50c1xuICAgIDIuIGxpc3RfcmVzdGF1cmFudHNcbiAgICAzLiBzaG93X21lbnVcbiAgICA0LiByZWFkX21lbnVcbiAgICA1LiBvcmRlcl9pdGVtXG4gICAgNi4gbm90aGluZ19tYXRjaGVzXG4gICAgTWVzc2FnZTogXCIke21lc3NhZ2V9XCJcbiAgICBSZXNwb25kIHdpdGggb25seSB0aGUgaW50ZW50IGlkLmA7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBjb21wbGV0aW9uID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgIG1vZGVsOiAnZGVlcHNlZWstY2hhdCcsXG4gICAgICBtZXNzYWdlczogW1xuICAgICAgICB7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiAnWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50LicgfSxcbiAgICAgICAgeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGludGVudCA9IGNvbXBsZXRpb24uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCk7XG4gICAgcmV0dXJuIGludGVudDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEZWVwU2VlayBBUEkgRXJyb3I6JywgZXJyb3IubWVzc2FnZSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY2xhc3NpZnkgaW50ZW50Jyk7XG4gIH1cbn1cblxuXG5cblxuXG5jb25zdCBhcGlUb2tlbiA9IHByb2Nlc3MuZW52LkxMQU1BIHx8ICc5OWNjZmUzYS1lYjE4LTQyMzItOGQ5My02YWQ1NzEzZWFjZDcnO1xuY29uc3QgbGxhbWFBUEkgPSBuZXcgTGxhbWFBSShhcGlUb2tlbik7XG5cbmV4cG9ydCBjb25zdCBjbGFzc2lmeUludGVudCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJtZXNzYWdlXCIsbWVzc2FnZSlcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxsYW1hQVBJLnJ1bih7XG4gICAgICBtZXNzYWdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogXCJzeXN0ZW1cIixcbiAgICAgICAgICBjb250ZW50OiBgQ2xhc3NpZnkgdGhlIGZvbGxvd2luZyBtZXNzYWdlIGludG8gb25lIG9mIHRoZXNlIGludGVudHM6XG4gICAgICAgICAgMS4gc2hvd19yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gc2VlIHJlc3RhdXJhbnRzXG4gICAgICAgICAgMi4gbGlzdF9yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gaGVhciByZXN0YXVyYW50IG5hbWVzXG4gICAgICAgICAgMy4gc2hvd19tZW51IC0gVXNlciB3YW50cyB0byB2aWV3IGEgc3BlY2lmaWMgcmVzdGF1cmFudCdzIG1lbnVcbiAgICAgICAgICA0LiByZWFkX21lbnUgLSBVc2VyIHdhbnRzIHRvIGhlYXIgbWVudSBpdGVtc1xuICAgICAgICAgIDUuIG9yZGVyX2l0ZW0gLSBVc2VyIHdhbnRzIHRvIG9yZGVyIGZvb2RcbiAgICAgICAgICA2LiBub3RoaW5nX21hdGNoZXMgLSBObyBtYXRjaGluZyBpbnRlbnRcbiAgICAgICAgICBcbiAgICAgICAgICBSZXNwb25kIE9OTFkgd2l0aCB0aGUgaW50ZW50IG51bWJlciAoMS02KS5gXG4gICAgICAgIH0sXG4gICAgICAgIHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IG1lc3NhZ2UgfVxuICAgICAgXSxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjIsXG4gICAgICBtYXhfdG9rZW5zOiAyXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgIGNvbnN0IGludGVudElkID0gcGFyc2VJbnQocmVzcG9uc2UuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCkpO1xuICAgIFxuICAgIC8vIE1hcCB0byBpbnRlbnQgc3RyaW5nc1xuICAgIGNvbnN0IGludGVudHMgPSBbXG4gICAgICAnc2hvd19yZXN0YXVyYW50cycsXG4gICAgICAnbGlzdF9yZXN0YXVyYW50cycsXG4gICAgICAnc2hvd19tZW51JyxcbiAgICAgICdyZWFkX21lbnUnLFxuICAgICAgJ29yZGVyX2l0ZW0nLFxuICAgICAgJ25vdGhpbmdfbWF0Y2hlcydcbiAgICBdO1xuXG4gICAgcmV0dXJuIGludGVudHNbaW50ZW50SWQgLSAxXSB8fCAnbm90aGluZ19tYXRjaGVzJztcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xsYW1hQUkgY2xhc3NpZmljYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiAnZXJyb3InO1xuICB9XG59O1xuXG4vLyBPcHRpb25hbDogRGlyZWN0IGNoYXQgY29tcGxldGlvblxuLy8gZXhwb3J0IGNvbnN0IHNlbmRDaGF0ID0gYXN5bmMgKG1lc3NhZ2VzKSA9PiB7XG4vLyAgIHJldHVybiBsbGFtYUFQSS5ydW4oe1xuLy8gICAgIG1lc3NhZ2VzLFxuLy8gICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4vLyAgICAgbWF4X3Rva2VuczogMTUwXG4vLyAgIH0pO1xuLy8gfTsiXSwibmFtZXMiOlsiT3BlbkFJIiwiTGxhbWFBSSIsIm9wZW5haSIsImJhc2VVUkwiLCJhcGlLZXkiLCJkYW5nZXJvdXNseUFsbG93QnJvd3NlciIsImNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrIiwibWVzc2FnZSIsInByb21wdCIsImNvbXBsZXRpb24iLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtb2RlbCIsIm1lc3NhZ2VzIiwicm9sZSIsImNvbnRlbnQiLCJpbnRlbnQiLCJjaG9pY2VzIiwidHJpbSIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiYXBpVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiTExBTUEiLCJsbGFtYUFQSSIsImNsYXNzaWZ5SW50ZW50IiwibG9nIiwicmVzcG9uc2UiLCJydW4iLCJ0ZW1wZXJhdHVyZSIsIm1heF90b2tlbnMiLCJpbnRlbnRJZCIsInBhcnNlSW50IiwiaW50ZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});