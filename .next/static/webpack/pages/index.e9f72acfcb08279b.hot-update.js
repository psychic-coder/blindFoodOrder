"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   \"default\": function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    const prompt = \"Classify the user's message into one of the following intents:\\n    1. show_restaurants\\n    2. list_restaurants\\n    3. show_menu\\n    4. read_menu\\n    5. order_item\\n    6. nothing_matches\\n    Message: \\\"\".concat(message, '\"\\n    Respond with only the intent id.');\n    try {\n        var _response_data_choices__message_content, _response_data_choices__message, _response_data_choices_, _response_data_choices;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://api.deepseek.com/v1/chat/completions\", {\n            model: \"deepseek-chat\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ]\n        }, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer sk-2f5b7faf13b1483893b3bc4790ff9c41\"\n            }\n        });\n        const intent = (_response_data_choices = response.data.choices) === null || _response_data_choices === void 0 ? void 0 : (_response_data_choices_ = _response_data_choices[0]) === null || _response_data_choices_ === void 0 ? void 0 : (_response_data_choices__message = _response_data_choices_.message) === null || _response_data_choices__message === void 0 ? void 0 : (_response_data_choices__message_content = _response_data_choices__message.content) === null || _response_data_choices__message_content === void 0 ? void 0 : _response_data_choices__message_content.trim();\n        res.status(200).json({\n            intent\n        });\n    } catch (error) {\n        var _error_response;\n        console.error(\"DeepSeek API Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n        res.status(500).json({\n            error: \"Failed to classify intent\"\n        });\n    }\n}\n\nconst apiToken = process.env.LLAMA || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_1__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQjtBQUVYLGVBQWVDLDJCQUEyQixLQUFTO1FBQVQsRUFBQ0MsT0FBTyxFQUFDLEdBQVQ7SUFFdkQsTUFBTUMsU0FBUyxtTkFPTyxPQUFSRCxTQUFRO0lBR3RCLElBQUk7WUFrQmFFLHlDQUFBQSxpQ0FBQUEseUJBQUFBO1FBakJmLE1BQU1BLFdBQVcsTUFBTUosa0RBQVUsQ0FDL0IsZ0RBQ0E7WUFDRU0sT0FBTztZQUNQQyxVQUFVO2dCQUNSO29CQUFFQyxNQUFNO29CQUFVQyxTQUFTO2dCQUErQjtnQkFDMUQ7b0JBQUVELE1BQU07b0JBQVFDLFNBQVNOO2dCQUFPO2FBQ2pDO1FBQ0gsR0FDQTtZQUNFTyxTQUFTO2dCQUNQLGdCQUFnQjtnQkFDaEJDLGVBQWdCO1lBQ2xCO1FBQ0Y7UUFHRixNQUFNQyxVQUFTUix5QkFBQUEsU0FBU1MsSUFBSSxDQUFDQyxPQUFPLGNBQXJCViw4Q0FBQUEsMEJBQUFBLHNCQUF1QixDQUFDLEVBQUUsY0FBMUJBLCtDQUFBQSxrQ0FBQUEsd0JBQTRCRixPQUFPLGNBQW5DRSx1REFBQUEsMENBQUFBLGdDQUFxQ0ssT0FBTyxjQUE1Q0wsOERBQUFBLHdDQUE4Q1csSUFBSTtRQUNqRUMsSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFTjtRQUFPO0lBQ2hDLEVBQUUsT0FBT08sT0FBTztZQUN1QkE7UUFBckNDLFFBQVFELEtBQUssQ0FBQyx1QkFBdUJBLEVBQUFBLGtCQUFBQSxNQUFNZixRQUFRLGNBQWRlLHNDQUFBQSxnQkFBZ0JOLElBQUksS0FBSU0sTUFBTWpCLE9BQU87UUFDMUVjLElBQUlDLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUE0QjtJQUM1RDtBQUNGO0FBSThCO0FBRTlCLE1BQU1HLFdBQVdDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxJQUFJO0FBQ3RDLE1BQU1DLFdBQVcsSUFBSUwsK0NBQU9BLENBQUNDO0FBRXRCLE1BQU1LLGlCQUFpQixPQUFPekI7SUFDakNrQixRQUFRUSxHQUFHLENBQUMsV0FBVTFCO0lBQ3hCLElBQUk7WUFxQndCRSxvQ0FBQUEsNEJBQUFBLG9CQUFBQTtRQXBCMUIsTUFBTUEsV0FBVyxNQUFNc0IsU0FBU0csR0FBRyxDQUFDO1lBQ2xDdEIsVUFBVTtnQkFDUjtvQkFDRUMsTUFBTTtvQkFDTkMsU0FBVTtnQkFTWjtnQkFDQTtvQkFBRUQsTUFBTTtvQkFBUUMsU0FBU1A7Z0JBQVE7YUFDbEM7WUFDRDRCLGFBQWE7WUFDYkMsWUFBWTtRQUNkO1FBQ0FYLFFBQVFRLEdBQUcsQ0FBQ3hCO1FBQ1osTUFBTTRCLFdBQVdDLFVBQVM3QixvQkFBQUEsU0FBU1UsT0FBTyxjQUFoQlYseUNBQUFBLHFCQUFBQSxpQkFBa0IsQ0FBQyxFQUFFLGNBQXJCQSwwQ0FBQUEsNkJBQUFBLG1CQUF1QkYsT0FBTyxjQUE5QkUsa0RBQUFBLHFDQUFBQSwyQkFBZ0NLLE9BQU8sY0FBdkNMLHlEQUFBQSxtQ0FBeUNXLElBQUk7UUFFdkUsd0JBQXdCO1FBQ3hCLE1BQU1tQixVQUFVO1lBQ2Q7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFFRCxPQUFPQSxPQUFPLENBQUNGLFdBQVcsRUFBRSxJQUFJO0lBRWxDLEVBQUUsT0FBT2IsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPO0lBQ1Q7QUFDRixFQUFFLENBRUYsbUNBQW1DO0NBQ25DLGdEQUFnRDtDQUNoRCwwQkFBMEI7Q0FDMUIsZ0JBQWdCO0NBQ2hCLHdCQUF3QjtDQUN4QixzQkFBc0I7Q0FDdEIsUUFBUTtDQUNSLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvRGVlcFNlZWsuanM/NDY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjbGFzc2lmeUludGVudEZyb21EZWVwU2Vlayh7bWVzc2FnZX0pIHtcbiBcbiAgY29uc3QgcHJvbXB0ID0gYENsYXNzaWZ5IHRoZSB1c2VyJ3MgbWVzc2FnZSBpbnRvIG9uZSBvZiB0aGUgZm9sbG93aW5nIGludGVudHM6XG4gICAgMS4gc2hvd19yZXN0YXVyYW50c1xuICAgIDIuIGxpc3RfcmVzdGF1cmFudHNcbiAgICAzLiBzaG93X21lbnVcbiAgICA0LiByZWFkX21lbnVcbiAgICA1LiBvcmRlcl9pdGVtXG4gICAgNi4gbm90aGluZ19tYXRjaGVzXG4gICAgTWVzc2FnZTogXCIke21lc3NhZ2V9XCJcbiAgICBSZXNwb25kIHdpdGggb25seSB0aGUgaW50ZW50IGlkLmA7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoXG4gICAgICAnaHR0cHM6Ly9hcGkuZGVlcHNlZWsuY29tL3YxL2NoYXQvY29tcGxldGlvbnMnLFxuICAgICAge1xuICAgICAgICBtb2RlbDogJ2RlZXBzZWVrLWNoYXQnLFxuICAgICAgICBtZXNzYWdlczogW1xuICAgICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQuJyB9LFxuICAgICAgICAgIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgc2stMmY1YjdmYWYxM2IxNDgzODkzYjNiYzQ3OTBmZjljNDFgLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25zdCBpbnRlbnQgPSByZXNwb25zZS5kYXRhLmNob2ljZXM/LlswXT8ubWVzc2FnZT8uY29udGVudD8udHJpbSgpO1xuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgaW50ZW50IH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RlZXBTZWVrIEFQSSBFcnJvcjonLCBlcnJvci5yZXNwb25zZT8uZGF0YSB8fCBlcnJvci5tZXNzYWdlKTtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnRmFpbGVkIHRvIGNsYXNzaWZ5IGludGVudCcgfSk7XG4gIH1cbn1cblxuXG5cbmltcG9ydCBMbGFtYUFJIGZyb20gJ2xsYW1hYWknO1xuXG5jb25zdCBhcGlUb2tlbiA9IHByb2Nlc3MuZW52LkxMQU1BIHx8ICc5OWNjZmUzYS1lYjE4LTQyMzItOGQ5My02YWQ1NzEzZWFjZDcnO1xuY29uc3QgbGxhbWFBUEkgPSBuZXcgTGxhbWFBSShhcGlUb2tlbik7XG5cbmV4cG9ydCBjb25zdCBjbGFzc2lmeUludGVudCA9IGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJtZXNzYWdlXCIsbWVzc2FnZSlcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGxsYW1hQVBJLnJ1bih7XG4gICAgICBtZXNzYWdlczogW1xuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogXCJzeXN0ZW1cIixcbiAgICAgICAgICBjb250ZW50OiBgQ2xhc3NpZnkgdGhlIGZvbGxvd2luZyBtZXNzYWdlIGludG8gb25lIG9mIHRoZXNlIGludGVudHM6XG4gICAgICAgICAgMS4gc2hvd19yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gc2VlIHJlc3RhdXJhbnRzXG4gICAgICAgICAgMi4gbGlzdF9yZXN0YXVyYW50cyAtIFVzZXIgd2FudHMgdG8gaGVhciByZXN0YXVyYW50IG5hbWVzXG4gICAgICAgICAgMy4gc2hvd19tZW51IC0gVXNlciB3YW50cyB0byB2aWV3IGEgc3BlY2lmaWMgcmVzdGF1cmFudCdzIG1lbnVcbiAgICAgICAgICA0LiByZWFkX21lbnUgLSBVc2VyIHdhbnRzIHRvIGhlYXIgbWVudSBpdGVtc1xuICAgICAgICAgIDUuIG9yZGVyX2l0ZW0gLSBVc2VyIHdhbnRzIHRvIG9yZGVyIGZvb2RcbiAgICAgICAgICA2LiBub3RoaW5nX21hdGNoZXMgLSBObyBtYXRjaGluZyBpbnRlbnRcbiAgICAgICAgICBcbiAgICAgICAgICBSZXNwb25kIE9OTFkgd2l0aCB0aGUgaW50ZW50IG51bWJlciAoMS02KS5gXG4gICAgICAgIH0sXG4gICAgICAgIHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IG1lc3NhZ2UgfVxuICAgICAgXSxcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjIsXG4gICAgICBtYXhfdG9rZW5zOiAyXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgIGNvbnN0IGludGVudElkID0gcGFyc2VJbnQocmVzcG9uc2UuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50Py50cmltKCkpO1xuICAgIFxuICAgIC8vIE1hcCB0byBpbnRlbnQgc3RyaW5nc1xuICAgIGNvbnN0IGludGVudHMgPSBbXG4gICAgICAnc2hvd19yZXN0YXVyYW50cycsXG4gICAgICAnbGlzdF9yZXN0YXVyYW50cycsXG4gICAgICAnc2hvd19tZW51JyxcbiAgICAgICdyZWFkX21lbnUnLFxuICAgICAgJ29yZGVyX2l0ZW0nLFxuICAgICAgJ25vdGhpbmdfbWF0Y2hlcydcbiAgICBdO1xuXG4gICAgcmV0dXJuIGludGVudHNbaW50ZW50SWQgLSAxXSB8fCAnbm90aGluZ19tYXRjaGVzJztcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0xsYW1hQUkgY2xhc3NpZmljYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiAnZXJyb3InO1xuICB9XG59O1xuXG4vLyBPcHRpb25hbDogRGlyZWN0IGNoYXQgY29tcGxldGlvblxuLy8gZXhwb3J0IGNvbnN0IHNlbmRDaGF0ID0gYXN5bmMgKG1lc3NhZ2VzKSA9PiB7XG4vLyAgIHJldHVybiBsbGFtYUFQSS5ydW4oe1xuLy8gICAgIG1lc3NhZ2VzLFxuLy8gICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4vLyAgICAgbWF4X3Rva2VuczogMTUwXG4vLyAgIH0pO1xuLy8gfTsiXSwibmFtZXMiOlsiYXhpb3MiLCJjbGFzc2lmeUludGVudEZyb21EZWVwU2VlayIsIm1lc3NhZ2UiLCJwcm9tcHQiLCJyZXNwb25zZSIsInBvc3QiLCJtb2RlbCIsIm1lc3NhZ2VzIiwicm9sZSIsImNvbnRlbnQiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImludGVudCIsImRhdGEiLCJjaG9pY2VzIiwidHJpbSIsInJlcyIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJMbGFtYUFJIiwiYXBpVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiTExBTUEiLCJsbGFtYUFQSSIsImNsYXNzaWZ5SW50ZW50IiwibG9nIiwicnVuIiwidGVtcGVyYXR1cmUiLCJtYXhfdG9rZW5zIiwiaW50ZW50SWQiLCJwYXJzZUludCIsImludGVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});