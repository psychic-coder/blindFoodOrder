"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   \"default\": function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"./node_modules/openai/index.mjs\");\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    baseURL: \"https://api.deepseek.com\",\n    apiKey: \"sk-2f5b7faf13b1483893b3bc4790ff9c41\"\n});\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    const prompt = \"Classify the user's message into one of the following intents:\\n    1. show_restaurants\\n    2. list_restaurants\\n    3. show_menu\\n    4. read_menu\\n    5. order_item\\n    6. nothing_matches\\n    Message: \\\"\".concat(message, '\"\\n    Respond with only the intent id.');\n    try {\n        var _completion_choices__message_content, _completion_choices__message, _completion_choices_, _completion_choices;\n        const completion = await openai.chat.completions.create({\n            model: \"deepseek-chat\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ]\n        });\n        const intent = (_completion_choices = completion.choices) === null || _completion_choices === void 0 ? void 0 : (_completion_choices_ = _completion_choices[0]) === null || _completion_choices_ === void 0 ? void 0 : (_completion_choices__message = _completion_choices_.message) === null || _completion_choices__message === void 0 ? void 0 : (_completion_choices__message_content = _completion_choices__message.content) === null || _completion_choices__message_content === void 0 ? void 0 : _completion_choices__message_content.trim();\n        return intent;\n    } catch (error) {\n        console.error(\"DeepSeek API Error:\", error.message);\n        throw new Error(\"Failed to classify intent\");\n    }\n}\nconst apiToken = process.env.LLAMA || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_0__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUU0QjtBQUNFO0FBRTlCLE1BQU1FLFNBQVMsSUFBSUYsOENBQU1BLENBQUM7SUFDeEJHLFNBQVM7SUFDVEMsUUFBUTtBQUNWO0FBRWUsZUFBZUMsMkJBQTJCLEtBQVc7UUFBWCxFQUFFQyxPQUFPLEVBQUUsR0FBWDtJQUN2RCxNQUFNQyxTQUFTLG1OQU9PLE9BQVJELFNBQVE7SUFHdEIsSUFBSTtZQVNhRSxzQ0FBQUEsOEJBQUFBLHNCQUFBQTtRQVJmLE1BQU1BLGFBQWEsTUFBTU4sT0FBT08sSUFBSSxDQUFDQyxXQUFXLENBQUNDLE1BQU0sQ0FBQztZQUN0REMsT0FBTztZQUNQQyxVQUFVO2dCQUNSO29CQUFFQyxNQUFNO29CQUFVQyxTQUFTO2dCQUErQjtnQkFDMUQ7b0JBQUVELE1BQU07b0JBQVFDLFNBQVNSO2dCQUFPO2FBQ2pDO1FBQ0g7UUFFQSxNQUFNUyxVQUFTUixzQkFBQUEsV0FBV1MsT0FBTyxjQUFsQlQsMkNBQUFBLHVCQUFBQSxtQkFBb0IsQ0FBQyxFQUFFLGNBQXZCQSw0Q0FBQUEsK0JBQUFBLHFCQUF5QkYsT0FBTyxjQUFoQ0Usb0RBQUFBLHVDQUFBQSw2QkFBa0NPLE9BQU8sY0FBekNQLDJEQUFBQSxxQ0FBMkNVLElBQUk7UUFDOUQsT0FBT0Y7SUFDVCxFQUFFLE9BQU9HLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHVCQUF1QkEsTUFBTWIsT0FBTztRQUNsRCxNQUFNLElBQUllLE1BQU07SUFDbEI7QUFDRjtBQU1BLE1BQU1DLFdBQVdDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxJQUFJO0FBQ3RDLE1BQU1DLFdBQVcsSUFBSXpCLCtDQUFPQSxDQUFDcUI7QUFFdEIsTUFBTUssaUJBQWlCLE9BQU9yQjtJQUNqQ2MsUUFBUVEsR0FBRyxDQUFDLFdBQVV0QjtJQUN4QixJQUFJO1lBcUJ3QnVCLG9DQUFBQSw0QkFBQUEsb0JBQUFBO1FBcEIxQixNQUFNQSxXQUFXLE1BQU1ILFNBQVNJLEdBQUcsQ0FBQztZQUNsQ2pCLFVBQVU7Z0JBQ1I7b0JBQ0VDLE1BQU07b0JBQ05DLFNBQVU7Z0JBU1o7Z0JBQ0E7b0JBQUVELE1BQU07b0JBQVFDLFNBQVNUO2dCQUFRO2FBQ2xDO1lBQ0R5QixhQUFhO1lBQ2JDLFlBQVk7UUFDZDtRQUNBWixRQUFRUSxHQUFHLENBQUNDO1FBQ1osTUFBTUksV0FBV0MsVUFBU0wsb0JBQUFBLFNBQVNaLE9BQU8sY0FBaEJZLHlDQUFBQSxxQkFBQUEsaUJBQWtCLENBQUMsRUFBRSxjQUFyQkEsMENBQUFBLDZCQUFBQSxtQkFBdUJ2QixPQUFPLGNBQTlCdUIsa0RBQUFBLHFDQUFBQSwyQkFBZ0NkLE9BQU8sY0FBdkNjLHlEQUFBQSxtQ0FBeUNYLElBQUk7UUFFdkUsd0JBQXdCO1FBQ3hCLE1BQU1pQixVQUFVO1lBQ2Q7WUFDQTtZQUNBO1lBQ0E7WUFDQTtZQUNBO1NBQ0Q7UUFFRCxPQUFPQSxPQUFPLENBQUNGLFdBQVcsRUFBRSxJQUFJO0lBRWxDLEVBQUUsT0FBT2QsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsaUNBQWlDQTtRQUMvQyxPQUFPO0lBQ1Q7QUFDRixFQUFFLENBRUYsbUNBQW1DO0NBQ25DLGdEQUFnRDtDQUNoRCwwQkFBMEI7Q0FDMUIsZ0JBQWdCO0NBQ2hCLHdCQUF3QjtDQUN4QixzQkFBc0I7Q0FDdEIsUUFBUTtDQUNSLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvRGVlcFNlZWsuanM/NDY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IE9wZW5BSSBmcm9tICdvcGVuYWknO1xuaW1wb3J0IExsYW1hQUkgZnJvbSAnbGxhbWFhaSc7XG5cbmNvbnN0IG9wZW5haSA9IG5ldyBPcGVuQUkoe1xuICBiYXNlVVJMOiAnaHR0cHM6Ly9hcGkuZGVlcHNlZWsuY29tJyxcbiAgYXBpS2V5OiAnc2stMmY1YjdmYWYxM2IxNDgzODkzYjNiYzQ3OTBmZjljNDEnLCAvLyBSZXBsYWNlIHdpdGggYSBzZWN1cmUgcmVmZXJlbmNlIGluIHByb2R1Y3Rpb25cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjbGFzc2lmeUludGVudEZyb21EZWVwU2Vlayh7IG1lc3NhZ2UgfSkge1xuICBjb25zdCBwcm9tcHQgPSBgQ2xhc3NpZnkgdGhlIHVzZXIncyBtZXNzYWdlIGludG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgaW50ZW50czpcbiAgICAxLiBzaG93X3Jlc3RhdXJhbnRzXG4gICAgMi4gbGlzdF9yZXN0YXVyYW50c1xuICAgIDMuIHNob3dfbWVudVxuICAgIDQuIHJlYWRfbWVudVxuICAgIDUuIG9yZGVyX2l0ZW1cbiAgICA2LiBub3RoaW5nX21hdGNoZXNcbiAgICBNZXNzYWdlOiBcIiR7bWVzc2FnZX1cIlxuICAgIFJlc3BvbmQgd2l0aCBvbmx5IHRoZSBpbnRlbnQgaWQuYDtcblxuICB0cnkge1xuICAgIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBvcGVuYWkuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuICAgICAgbW9kZWw6ICdkZWVwc2Vlay1jaGF0JyxcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQuJyB9LFxuICAgICAgICB7IHJvbGU6ICd1c2VyJywgY29udGVudDogcHJvbXB0IH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgaW50ZW50ID0gY29tcGxldGlvbi5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKTtcbiAgICByZXR1cm4gaW50ZW50O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0RlZXBTZWVrIEFQSSBFcnJvcjonLCBlcnJvci5tZXNzYWdlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjbGFzc2lmeSBpbnRlbnQnKTtcbiAgfVxufVxuXG5cblxuXG5cbmNvbnN0IGFwaVRva2VuID0gcHJvY2Vzcy5lbnYuTExBTUEgfHwgJzk5Y2NmZTNhLWViMTgtNDIzMi04ZDkzLTZhZDU3MTNlYWNkNyc7XG5jb25zdCBsbGFtYUFQSSA9IG5ldyBMbGFtYUFJKGFwaVRva2VuKTtcblxuZXhwb3J0IGNvbnN0IGNsYXNzaWZ5SW50ZW50ID0gYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIm1lc3NhZ2VcIixtZXNzYWdlKVxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbGxhbWFBUEkucnVuKHtcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiBcInN5c3RlbVwiLFxuICAgICAgICAgIGNvbnRlbnQ6IGBDbGFzc2lmeSB0aGUgZm9sbG93aW5nIG1lc3NhZ2UgaW50byBvbmUgb2YgdGhlc2UgaW50ZW50czpcbiAgICAgICAgICAxLiBzaG93X3Jlc3RhdXJhbnRzIC0gVXNlciB3YW50cyB0byBzZWUgcmVzdGF1cmFudHNcbiAgICAgICAgICAyLiBsaXN0X3Jlc3RhdXJhbnRzIC0gVXNlciB3YW50cyB0byBoZWFyIHJlc3RhdXJhbnQgbmFtZXNcbiAgICAgICAgICAzLiBzaG93X21lbnUgLSBVc2VyIHdhbnRzIHRvIHZpZXcgYSBzcGVjaWZpYyByZXN0YXVyYW50J3MgbWVudVxuICAgICAgICAgIDQuIHJlYWRfbWVudSAtIFVzZXIgd2FudHMgdG8gaGVhciBtZW51IGl0ZW1zXG4gICAgICAgICAgNS4gb3JkZXJfaXRlbSAtIFVzZXIgd2FudHMgdG8gb3JkZXIgZm9vZFxuICAgICAgICAgIDYuIG5vdGhpbmdfbWF0Y2hlcyAtIE5vIG1hdGNoaW5nIGludGVudFxuICAgICAgICAgIFxuICAgICAgICAgIFJlc3BvbmQgT05MWSB3aXRoIHRoZSBpbnRlbnQgbnVtYmVyICgxLTYpLmBcbiAgICAgICAgfSxcbiAgICAgICAgeyByb2xlOiBcInVzZXJcIiwgY29udGVudDogbWVzc2FnZSB9XG4gICAgICBdLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuMixcbiAgICAgIG1heF90b2tlbnM6IDJcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgY29uc3QgaW50ZW50SWQgPSBwYXJzZUludChyZXNwb25zZS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKSk7XG4gICAgXG4gICAgLy8gTWFwIHRvIGludGVudCBzdHJpbmdzXG4gICAgY29uc3QgaW50ZW50cyA9IFtcbiAgICAgICdzaG93X3Jlc3RhdXJhbnRzJyxcbiAgICAgICdsaXN0X3Jlc3RhdXJhbnRzJyxcbiAgICAgICdzaG93X21lbnUnLFxuICAgICAgJ3JlYWRfbWVudScsXG4gICAgICAnb3JkZXJfaXRlbScsXG4gICAgICAnbm90aGluZ19tYXRjaGVzJ1xuICAgIF07XG5cbiAgICByZXR1cm4gaW50ZW50c1tpbnRlbnRJZCAtIDFdIHx8ICdub3RoaW5nX21hdGNoZXMnO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignTGxhbWFBSSBjbGFzc2lmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuICdlcnJvcic7XG4gIH1cbn07XG5cbi8vIE9wdGlvbmFsOiBEaXJlY3QgY2hhdCBjb21wbGV0aW9uXG4vLyBleHBvcnQgY29uc3Qgc2VuZENoYXQgPSBhc3luYyAobWVzc2FnZXMpID0+IHtcbi8vICAgcmV0dXJuIGxsYW1hQVBJLnJ1bih7XG4vLyAgICAgbWVzc2FnZXMsXG4vLyAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbi8vICAgICBtYXhfdG9rZW5zOiAxNTBcbi8vICAgfSk7XG4vLyB9OyJdLCJuYW1lcyI6WyJPcGVuQUkiLCJMbGFtYUFJIiwib3BlbmFpIiwiYmFzZVVSTCIsImFwaUtleSIsImNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrIiwibWVzc2FnZSIsInByb21wdCIsImNvbXBsZXRpb24iLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtb2RlbCIsIm1lc3NhZ2VzIiwicm9sZSIsImNvbnRlbnQiLCJpbnRlbnQiLCJjaG9pY2VzIiwidHJpbSIsImVycm9yIiwiY29uc29sZSIsIkVycm9yIiwiYXBpVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiTExBTUEiLCJsbGFtYUFQSSIsImNsYXNzaWZ5SW50ZW50IiwibG9nIiwicmVzcG9uc2UiLCJydW4iLCJ0ZW1wZXJhdHVyZSIsIm1heF90b2tlbnMiLCJpbnRlbnRJZCIsInBhcnNlSW50IiwiaW50ZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ }),

/***/ "./node_modules/llamaai/index.js":
/*!***************************************!*\
  !*** ./node_modules/llamaai/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n\n\n\nclass LlamaAI {\n  constructor(apiToken, hostname = 'https://api.llama-api.com', domainPath = '/chat/completions') {\n    this.hostname = hostname;\n    this.domainPath = domainPath;\n    this.apiToken = apiToken;\n    this.headers = { Authorization: `Bearer ${this.apiToken}` };\n    this.queue = [];\n  }\n\n  async makeRequest(apiRequestJson) {\n    try {\n      return await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.hostname}${this.domainPath}`, apiRequestJson, { headers: this.headers });\n    } catch (error) {\n      throw new Error(`Error while making request: ${error.message}`);\n    }\n  }\n\n  async _runStreamForJupyter(apiRequestJson) {\n    const response = await this.makeRequest(apiRequestJson);\n\n    for (const chunk of response.data) {\n      this.queue.push(chunk);\n    }\n  }\n\n  async *getSequences() {\n    while (this.queue.length > 0) {\n      yield this.queue.shift();\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n  }\n\n  async runStream(apiRequestJson) {\n    await this._runStreamForJupyter(apiRequestJson);\n    this.getSequences();\n  }\n\n  async runSync(apiRequestJson) {\n    const response = await this.makeRequest(apiRequestJson);\n\n    if (response.status !== 200) {\n      throw new Error(`POST ${response.status} ${response.data.detail}`);\n    }\n\n    return response.data;\n  }\n\n  run(apiRequestJson) {\n    if (apiRequestJson.stream) {\n      return this.runStream(apiRequestJson);\n    } else {\n      return this.runSync(apiRequestJson);\n    }\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (LlamaAI);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbGxhbWFhaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOztBQUEwQjs7O0FBRzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIseUJBQXlCLGNBQWM7QUFDNUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGtEQUFVLElBQUksY0FBYyxFQUFFLGdCQUFnQixxQkFBcUIsdUJBQXVCO0FBQzdHLE1BQU07QUFDTixxREFBcUQsY0FBYztBQUNuRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsaUJBQWlCLEVBQUUscUJBQXFCO0FBQ3RFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9sbGFtYWFpL2luZGV4LmpzP2U2NzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuXG5cbmNsYXNzIExsYW1hQUkge1xuICBjb25zdHJ1Y3RvcihhcGlUb2tlbiwgaG9zdG5hbWUgPSAnaHR0cHM6Ly9hcGkubGxhbWEtYXBpLmNvbScsIGRvbWFpblBhdGggPSAnL2NoYXQvY29tcGxldGlvbnMnKSB7XG4gICAgdGhpcy5ob3N0bmFtZSA9IGhvc3RuYW1lO1xuICAgIHRoaXMuZG9tYWluUGF0aCA9IGRvbWFpblBhdGg7XG4gICAgdGhpcy5hcGlUb2tlbiA9IGFwaVRva2VuO1xuICAgIHRoaXMuaGVhZGVycyA9IHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuYXBpVG9rZW59YCB9O1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfVxuXG4gIGFzeW5jIG1ha2VSZXF1ZXN0KGFwaVJlcXVlc3RKc29uKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBheGlvcy5wb3N0KGAke3RoaXMuaG9zdG5hbWV9JHt0aGlzLmRvbWFpblBhdGh9YCwgYXBpUmVxdWVzdEpzb24sIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHdoaWxlIG1ha2luZyByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgX3J1blN0cmVhbUZvckp1cHl0ZXIoYXBpUmVxdWVzdEpzb24pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoYXBpUmVxdWVzdEpzb24pO1xuXG4gICAgZm9yIChjb25zdCBjaHVuayBvZiByZXNwb25zZS5kYXRhKSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goY2h1bmspO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jICpnZXRTZXF1ZW5jZXMoKSB7XG4gICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgeWllbGQgdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJ1blN0cmVhbShhcGlSZXF1ZXN0SnNvbikge1xuICAgIGF3YWl0IHRoaXMuX3J1blN0cmVhbUZvckp1cHl0ZXIoYXBpUmVxdWVzdEpzb24pO1xuICAgIHRoaXMuZ2V0U2VxdWVuY2VzKCk7XG4gIH1cblxuICBhc3luYyBydW5TeW5jKGFwaVJlcXVlc3RKc29uKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KGFwaVJlcXVlc3RKc29uKTtcblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQT1NUICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLmRhdGEuZGV0YWlsfWApO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG5cbiAgcnVuKGFwaVJlcXVlc3RKc29uKSB7XG4gICAgaWYgKGFwaVJlcXVlc3RKc29uLnN0cmVhbSkge1xuICAgICAgcmV0dXJuIHRoaXMucnVuU3RyZWFtKGFwaVJlcXVlc3RKc29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucnVuU3luYyhhcGlSZXF1ZXN0SnNvbik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExsYW1hQUkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/llamaai/index.js\n"));

/***/ })

});