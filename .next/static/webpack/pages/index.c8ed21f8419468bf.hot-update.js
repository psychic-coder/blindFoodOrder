"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/components/DeepSeek.js":
/*!************************************!*\
  !*** ./src/components/DeepSeek.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   classifyIntent: function() { return /* binding */ classifyIntent; },\n/* harmony export */   \"default\": function() { return /* binding */ classifyIntentFromDeepSeek; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var llamaai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! llamaai */ \"./node_modules/llamaai/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\nasync function classifyIntentFromDeepSeek(param) {\n    let { message } = param;\n    const prompt = \"Classify the user's message into one of the following intents:\\n    1. show_restaurants\\n    2. list_restaurants\\n    3. show_menu\\n    4. read_menu\\n    5. order_item\\n    6. nothing_matches\\n    Message: \\\"\".concat(message, '\"\\n    Respond with only the intent id.');\n    try {\n        var _response_data_choices__message_content, _response_data_choices__message, _response_data_choices_, _response_data_choices;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"https://api.deepseek.com/v1/chat/completions\", {\n            model: \"deepseek-chat\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"You are a helpful assistant.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ]\n        }, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \".concat(process.env.DEEPSEEK_API_KEY)\n            }\n        });\n        const intent = (_response_data_choices = response.data.choices) === null || _response_data_choices === void 0 ? void 0 : (_response_data_choices_ = _response_data_choices[0]) === null || _response_data_choices_ === void 0 ? void 0 : (_response_data_choices__message = _response_data_choices_.message) === null || _response_data_choices__message === void 0 ? void 0 : (_response_data_choices__message_content = _response_data_choices__message.content) === null || _response_data_choices__message_content === void 0 ? void 0 : _response_data_choices__message_content.trim();\n        res.status(200).json({\n            intent\n        });\n    } catch (error) {\n        var _error_response;\n        console.error(\"DeepSeek API Error:\", ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.data) || error.message);\n        res.status(500).json({\n            error: \"Failed to classify intent\"\n        });\n    }\n}\n\nconst apiToken = process.env.NEXT_PUBLIC_LLAMA_API_TOKEN || \"99ccfe3a-eb18-4232-8d93-6ad5713eacd7\";\nconst llamaAPI = new llamaai__WEBPACK_IMPORTED_MODULE_1__[\"default\"](apiToken);\nconst classifyIntent = async (message)=>{\n    console.log(\"message\", message);\n    try {\n        var _response_choices__message_content, _response_choices__message, _response_choices_, _response_choices;\n        const response = await llamaAPI.run({\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"Classify the following message into one of these intents:\\n          1. show_restaurants - User wants to see restaurants\\n          2. list_restaurants - User wants to hear restaurant names\\n          3. show_menu - User wants to view a specific restaurant's menu\\n          4. read_menu - User wants to hear menu items\\n          5. order_item - User wants to order food\\n          6. nothing_matches - No matching intent\\n          \\n          Respond ONLY with the intent number (1-6).\"\n                },\n                {\n                    role: \"user\",\n                    content: message\n                }\n            ],\n            temperature: 0.2,\n            max_tokens: 2\n        });\n        console.log(response);\n        const intentId = parseInt((_response_choices = response.choices) === null || _response_choices === void 0 ? void 0 : (_response_choices_ = _response_choices[0]) === null || _response_choices_ === void 0 ? void 0 : (_response_choices__message = _response_choices_.message) === null || _response_choices__message === void 0 ? void 0 : (_response_choices__message_content = _response_choices__message.content) === null || _response_choices__message_content === void 0 ? void 0 : _response_choices__message_content.trim());\n        // Map to intent strings\n        const intents = [\n            \"show_restaurants\",\n            \"list_restaurants\",\n            \"show_menu\",\n            \"read_menu\",\n            \"order_item\",\n            \"nothing_matches\"\n        ];\n        return intents[intentId - 1] || \"nothing_matches\";\n    } catch (error) {\n        console.error(\"LlamaAI classification error:\", error);\n        return \"error\";\n    }\n}; // Optional: Direct chat completion\n // export const sendChat = async (messages) => {\n //   return llamaAPI.run({\n //     messages,\n //     temperature: 0.7,\n //     max_tokens: 150\n //   });\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQjtBQUVYLGVBQWVDLDJCQUEyQixLQUFTO1FBQVQsRUFBQ0MsT0FBTyxFQUFDLEdBQVQ7SUFFdkQsTUFBTUMsU0FBUyxtTkFPTyxPQUFSRCxTQUFRO0lBR3RCLElBQUk7WUFrQmFFLHlDQUFBQSxpQ0FBQUEseUJBQUFBO1FBakJmLE1BQU1BLFdBQVcsTUFBTUosa0RBQVUsQ0FDL0IsZ0RBQ0E7WUFDRU0sT0FBTztZQUNQQyxVQUFVO2dCQUNSO29CQUFFQyxNQUFNO29CQUFVQyxTQUFTO2dCQUErQjtnQkFDMUQ7b0JBQUVELE1BQU07b0JBQVFDLFNBQVNOO2dCQUFPO2FBQ2pDO1FBQ0gsR0FDQTtZQUNFTyxTQUFTO2dCQUNQLGdCQUFnQjtnQkFDaEJDLGVBQWUsVUFBdUMsT0FBN0JDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsZ0JBQWdCO1lBQ3ZEO1FBQ0Y7UUFHRixNQUFNQyxVQUFTWCx5QkFBQUEsU0FBU1ksSUFBSSxDQUFDQyxPQUFPLGNBQXJCYiw4Q0FBQUEsMEJBQUFBLHNCQUF1QixDQUFDLEVBQUUsY0FBMUJBLCtDQUFBQSxrQ0FBQUEsd0JBQTRCRixPQUFPLGNBQW5DRSx1REFBQUEsMENBQUFBLGdDQUFxQ0ssT0FBTyxjQUE1Q0wsOERBQUFBLHdDQUE4Q2MsSUFBSTtRQUNqRUMsSUFBSUMsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFTjtRQUFPO0lBQ2hDLEVBQUUsT0FBT08sT0FBTztZQUN1QkE7UUFBckNDLFFBQVFELEtBQUssQ0FBQyx1QkFBdUJBLEVBQUFBLGtCQUFBQSxNQUFNbEIsUUFBUSxjQUFka0Isc0NBQUFBLGdCQUFnQk4sSUFBSSxLQUFJTSxNQUFNcEIsT0FBTztRQUMxRWlCLElBQUlDLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUE0QjtJQUM1RDtBQUNGO0FBSThCO0FBRTlCLE1BQU1HLFdBQVdiLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ2EsMkJBQTJCLElBQUk7QUFDNUQsTUFBTUMsV0FBVyxJQUFJSCwrQ0FBT0EsQ0FBQ0M7QUFFdEIsTUFBTUcsaUJBQWlCLE9BQU8xQjtJQUNqQ3FCLFFBQVFNLEdBQUcsQ0FBQyxXQUFVM0I7SUFDeEIsSUFBSTtZQXFCd0JFLG9DQUFBQSw0QkFBQUEsb0JBQUFBO1FBcEIxQixNQUFNQSxXQUFXLE1BQU11QixTQUFTRyxHQUFHLENBQUM7WUFDbEN2QixVQUFVO2dCQUNSO29CQUNFQyxNQUFNO29CQUNOQyxTQUFVO2dCQVNaO2dCQUNBO29CQUFFRCxNQUFNO29CQUFRQyxTQUFTUDtnQkFBUTthQUNsQztZQUNENkIsYUFBYTtZQUNiQyxZQUFZO1FBQ2Q7UUFDQVQsUUFBUU0sR0FBRyxDQUFDekI7UUFDWixNQUFNNkIsV0FBV0MsVUFBUzlCLG9CQUFBQSxTQUFTYSxPQUFPLGNBQWhCYix5Q0FBQUEscUJBQUFBLGlCQUFrQixDQUFDLEVBQUUsY0FBckJBLDBDQUFBQSw2QkFBQUEsbUJBQXVCRixPQUFPLGNBQTlCRSxrREFBQUEscUNBQUFBLDJCQUFnQ0ssT0FBTyxjQUF2Q0wseURBQUFBLG1DQUF5Q2MsSUFBSTtRQUV2RSx3QkFBd0I7UUFDeEIsTUFBTWlCLFVBQVU7WUFDZDtZQUNBO1lBQ0E7WUFDQTtZQUNBO1lBQ0E7U0FDRDtRQUVELE9BQU9BLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFLElBQUk7SUFFbEMsRUFBRSxPQUFPWCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE9BQU87SUFDVDtBQUNGLEVBQUUsQ0FFRixtQ0FBbUM7Q0FDbkMsZ0RBQWdEO0NBQ2hELDBCQUEwQjtDQUMxQixnQkFBZ0I7Q0FDaEIsd0JBQXdCO0NBQ3hCLHNCQUFzQjtDQUN0QixRQUFRO0NBQ1IsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9EZWVwU2Vlay5qcz80NjQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrKHttZXNzYWdlfSkge1xuIFxuICBjb25zdCBwcm9tcHQgPSBgQ2xhc3NpZnkgdGhlIHVzZXIncyBtZXNzYWdlIGludG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgaW50ZW50czpcbiAgICAxLiBzaG93X3Jlc3RhdXJhbnRzXG4gICAgMi4gbGlzdF9yZXN0YXVyYW50c1xuICAgIDMuIHNob3dfbWVudVxuICAgIDQuIHJlYWRfbWVudVxuICAgIDUuIG9yZGVyX2l0ZW1cbiAgICA2LiBub3RoaW5nX21hdGNoZXNcbiAgICBNZXNzYWdlOiBcIiR7bWVzc2FnZX1cIlxuICAgIFJlc3BvbmQgd2l0aCBvbmx5IHRoZSBpbnRlbnQgaWQuYDtcblxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChcbiAgICAgICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsXG4gICAgICB7XG4gICAgICAgIG1vZGVsOiAnZGVlcHNlZWstY2hhdCcsXG4gICAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgICAgeyByb2xlOiAnc3lzdGVtJywgY29udGVudDogJ1lvdSBhcmUgYSBoZWxwZnVsIGFzc2lzdGFudC4nIH0sXG4gICAgICAgICAgeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHByb21wdCB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Byb2Nlc3MuZW52LkRFRVBTRUVLX0FQSV9LRVl9YCxcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uc3QgaW50ZW50ID0gcmVzcG9uc2UuZGF0YS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKTtcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IGludGVudCB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEZWVwU2VlayBBUEkgRXJyb3I6JywgZXJyb3IucmVzcG9uc2U/LmRhdGEgfHwgZXJyb3IubWVzc2FnZSk7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBjbGFzc2lmeSBpbnRlbnQnIH0pO1xuICB9XG59XG5cblxuXG5pbXBvcnQgTGxhbWFBSSBmcm9tICdsbGFtYWFpJztcblxuY29uc3QgYXBpVG9rZW4gPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19MTEFNQV9BUElfVE9LRU4gfHwgJzk5Y2NmZTNhLWViMTgtNDIzMi04ZDkzLTZhZDU3MTNlYWNkNyc7XG5jb25zdCBsbGFtYUFQSSA9IG5ldyBMbGFtYUFJKGFwaVRva2VuKTtcblxuZXhwb3J0IGNvbnN0IGNsYXNzaWZ5SW50ZW50ID0gYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIm1lc3NhZ2VcIixtZXNzYWdlKVxuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbGxhbWFBUEkucnVuKHtcbiAgICAgIG1lc3NhZ2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByb2xlOiBcInN5c3RlbVwiLFxuICAgICAgICAgIGNvbnRlbnQ6IGBDbGFzc2lmeSB0aGUgZm9sbG93aW5nIG1lc3NhZ2UgaW50byBvbmUgb2YgdGhlc2UgaW50ZW50czpcbiAgICAgICAgICAxLiBzaG93X3Jlc3RhdXJhbnRzIC0gVXNlciB3YW50cyB0byBzZWUgcmVzdGF1cmFudHNcbiAgICAgICAgICAyLiBsaXN0X3Jlc3RhdXJhbnRzIC0gVXNlciB3YW50cyB0byBoZWFyIHJlc3RhdXJhbnQgbmFtZXNcbiAgICAgICAgICAzLiBzaG93X21lbnUgLSBVc2VyIHdhbnRzIHRvIHZpZXcgYSBzcGVjaWZpYyByZXN0YXVyYW50J3MgbWVudVxuICAgICAgICAgIDQuIHJlYWRfbWVudSAtIFVzZXIgd2FudHMgdG8gaGVhciBtZW51IGl0ZW1zXG4gICAgICAgICAgNS4gb3JkZXJfaXRlbSAtIFVzZXIgd2FudHMgdG8gb3JkZXIgZm9vZFxuICAgICAgICAgIDYuIG5vdGhpbmdfbWF0Y2hlcyAtIE5vIG1hdGNoaW5nIGludGVudFxuICAgICAgICAgIFxuICAgICAgICAgIFJlc3BvbmQgT05MWSB3aXRoIHRoZSBpbnRlbnQgbnVtYmVyICgxLTYpLmBcbiAgICAgICAgfSxcbiAgICAgICAgeyByb2xlOiBcInVzZXJcIiwgY29udGVudDogbWVzc2FnZSB9XG4gICAgICBdLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuMixcbiAgICAgIG1heF90b2tlbnM6IDJcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgY29uc3QgaW50ZW50SWQgPSBwYXJzZUludChyZXNwb25zZS5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ/LnRyaW0oKSk7XG4gICAgXG4gICAgLy8gTWFwIHRvIGludGVudCBzdHJpbmdzXG4gICAgY29uc3QgaW50ZW50cyA9IFtcbiAgICAgICdzaG93X3Jlc3RhdXJhbnRzJyxcbiAgICAgICdsaXN0X3Jlc3RhdXJhbnRzJyxcbiAgICAgICdzaG93X21lbnUnLFxuICAgICAgJ3JlYWRfbWVudScsXG4gICAgICAnb3JkZXJfaXRlbScsXG4gICAgICAnbm90aGluZ19tYXRjaGVzJ1xuICAgIF07XG5cbiAgICByZXR1cm4gaW50ZW50c1tpbnRlbnRJZCAtIDFdIHx8ICdub3RoaW5nX21hdGNoZXMnO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignTGxhbWFBSSBjbGFzc2lmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuICdlcnJvcic7XG4gIH1cbn07XG5cbi8vIE9wdGlvbmFsOiBEaXJlY3QgY2hhdCBjb21wbGV0aW9uXG4vLyBleHBvcnQgY29uc3Qgc2VuZENoYXQgPSBhc3luYyAobWVzc2FnZXMpID0+IHtcbi8vICAgcmV0dXJuIGxsYW1hQVBJLnJ1bih7XG4vLyAgICAgbWVzc2FnZXMsXG4vLyAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbi8vICAgICBtYXhfdG9rZW5zOiAxNTBcbi8vICAgfSk7XG4vLyB9OyJdLCJuYW1lcyI6WyJheGlvcyIsImNsYXNzaWZ5SW50ZW50RnJvbURlZXBTZWVrIiwibWVzc2FnZSIsInByb21wdCIsInJlc3BvbnNlIiwicG9zdCIsIm1vZGVsIiwibWVzc2FnZXMiLCJyb2xlIiwiY29udGVudCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwicHJvY2VzcyIsImVudiIsIkRFRVBTRUVLX0FQSV9LRVkiLCJpbnRlbnQiLCJkYXRhIiwiY2hvaWNlcyIsInRyaW0iLCJyZXMiLCJzdGF0dXMiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiTGxhbWFBSSIsImFwaVRva2VuIiwiTkVYVF9QVUJMSUNfTExBTUFfQVBJX1RPS0VOIiwibGxhbWFBUEkiLCJjbGFzc2lmeUludGVudCIsImxvZyIsInJ1biIsInRlbXBlcmF0dXJlIiwibWF4X3Rva2VucyIsImludGVudElkIiwicGFyc2VJbnQiLCJpbnRlbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/DeepSeek.js\n"));

/***/ })

});